@model LinkifyBLL.ModelView.ProfileMV

@{
    ViewData["Title"] = "Edit Profile";
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}

@section Styles {
    <style>
        .profile-edit-container {
            background: var(--glass-bg);
            backdrop-filter: var(--backdrop-blur);
            -webkit-backdrop-filter: var(--backdrop-blur);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            box-shadow: var(--shadow-strong);
            padding: 40px;
            max-width: 1000px;
            margin: 30px auto;
            position: relative;
            overflow: hidden;
        }

        .profile-edit-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-blue), var(--accent-purple), var(--primary-yellow), var(--accent-orange));
        }

        .profile-header {
            text-align: center;
            margin-bottom: 40px;
            position: relative;
        }

        .profile-title {
            font-size: 32px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary-blue), var(--accent-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .profile-subtitle {
            color: var(--text-light);
            font-size: 16px;
        }

        .image-upload-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 40px;
            padding: 30px;
            background: linear-gradient(135deg, rgba(27, 132, 255, 0.05), rgba(246, 192, 0, 0.05));
            border-radius: 16px;
            border: 2px dashed var(--border-light);
            transition: all 0.3s ease;
        }

        .image-upload-section:hover {
            border-color: var(--primary-blue);
            background: linear-gradient(135deg, rgba(27, 132, 255, 0.1), rgba(246, 192, 0, 0.1));
        }

        .current-profile-image {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary-blue), var(--accent-purple));
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .current-profile-image:hover {
            transform: scale(1.05);
            box-shadow: var(--shadow-hover);
        }

        .current-profile-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

        .image-placeholder {
            font-size: 48px;
            color: white;
        }

        .upload-btn {
            background: linear-gradient(135deg, var(--primary-blue), var(--accent-blue));
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
            overflow: hidden;
        }

        .upload-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transition: all 0.6s ease;
            transform: translate(-50%, -50%);
        }

        .upload-btn:hover::before {
            width: 300px;
            height: 300px;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(27, 132, 255, 0.3);
        }

        .form-sections {
            display: grid;
            gap: 30px;
        }

        .form-section {
            background: var(--background-primary);
            border: 1px solid var(--border-light);
            border-radius: 16px;
            padding: 30px;
            position: relative;
            transition: all 0.3s ease;
        }

        .form-section:hover {
            box-shadow: var(--shadow-hover);
            transform: translateY(-2px);
        }

        .section-title {
            font-size: 20px;
            font-weight: 700;
            color: var(--text-dark);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 12px;
            position: relative;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-blue), var(--accent-blue));
            border-radius: 2px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .form-group {
            position: relative;
            margin-bottom: 20px;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-dark);
            font-weight: 600;
            font-size: 14px;
            position: relative;
        }

        .required::after {
            content: '*';
            color: var(--accent-orange);
            margin-left: 4px;
        }

        .form-control {
            width: 100%;
            padding: 15px 18px;
            border: 2px solid var(--border-light);
            border-radius: 12px;
            font-size: 15px;
            transition: all 0.3s ease;
            background: var(--background-primary);
            color: var(--text-dark);
            font-family: inherit;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 4px rgba(27, 132, 255, 0.1);
            transform: scale(1.01);
        }

        .form-control.is-invalid {
            border-color: var(--accent-orange);
            box-shadow: 0 0 0 4px rgba(255, 107, 53, 0.1);
        }

        .form-control.is-valid {
            border-color: var(--accent-green);
            box-shadow: 0 0 0 4px rgba(0, 208, 132, 0.1);
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        select.form-control {
            cursor: pointer;
        }

        .input-group {
            position: relative;
            display: flex;
            align-items: center;
        }

        .input-icon {
            position: absolute;
            left: 15px;
            color: var(--dark-gray);
            font-size: 18px;
            z-index: 2;
            transition: color 0.3s ease;
        }

        .form-control:focus ~ .input-icon {
            color: var(--primary-blue);
        }

        .input-group .form-control {
            padding-left: 50px;
        }

        .field-validation-error {
            color: var(--accent-orange);
            font-size: 12px;
            margin-top: 5px;
            display: flex;
            align-items: center;
            gap: 5px;
            animation: shake 0.3s ease-in-out;
        }

        @@keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .field-validation-valid {
            display: none;
        }

        .validation-summary-errors {
            background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(255, 107, 53, 0.05));
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 30px;
            color: var(--accent-orange);
        }

        .validation-summary-errors ul {
            margin: 0;
            padding-left: 20px;
        }

        .checkbox-group,
        .radio-group {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 10px;
        }

        .custom-checkbox,
        .custom-radio {
            position: relative;
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            padding: 10px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .custom-checkbox:hover,
        .custom-radio:hover {
            background: rgba(27, 132, 255, 0.05);
        }

        .custom-checkbox input,
        .custom-radio input {
            width: 18px;
            height: 18px;
            accent-color: var(--primary-blue);
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 40px;
            padding-top: 30px;
            border-top: 1px solid var(--border-light);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-blue), var(--accent-blue));
            color: white;
            border: none;
            padding: 15px 35px;
            border-radius: 30px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            min-width: 150px;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transition: all 0.6s ease;
            transform: translate(-50%, -50%);
        }

        .btn-primary:hover::before {
            width: 400px;
            height: 400px;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(27, 132, 255, 0.4);
        }

        .btn-secondary {
            background: var(--background-primary);
            color: var(--text-dark);
            border: 2px solid var(--border-light);
            padding: 15px 35px;
            border-radius: 30px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 150px;
        }

        .btn-secondary:hover {
            border-color: var(--primary-blue);
            color: var(--primary-blue);
            transform: translateY(-3px);
            box-shadow: var(--shadow-hover);
        }

        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            border-radius: 20px;
            z-index: 1000;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--light-gray);
            border-top: 4px solid var(--primary-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-indicator {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
        }

        .progress-step {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .step-circle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: var(--text-light);
            transition: all 0.3s ease;
        }

        .step-circle.active {
            background: linear-gradient(135deg, var(--primary-blue), var(--accent-blue));
            color: white;
            transform: scale(1.1);
        }

        .step-line {
            width: 100px;
            height: 2px;
            background: var(--light-gray);
        }

        .step-line.active {
            background: linear-gradient(90deg, var(--primary-blue), var(--accent-blue));
        }

        @@media (max-width: 768px) {
            .profile-edit-container {
                margin: 15px;
                padding: 20px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .form-actions {
                flex-direction: column;
            }

            .btn-primary,
            .btn-secondary {
                width: 100%;
            }

            .current-profile-image {
                width: 100px;
                height: 100px;
            }

            .profile-title {
                font-size: 24px;
            }
        }
    </style>


    <style>
        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Additional responsive improvements */
        @@media (max-width: 480px) {
            .image-upload-section {
                padding: 20px;
            }

            .current-profile-image {
                width: 80px;
                height: 80px;
            }

            .upload-btn {
                padding: 10px 20px;
                font-size: 12px;
            }

            .form-section {
                padding: 20px;
            }

            .section-title {
                font-size: 18px;
            }

            .form-control {
                padding: 12px 15px;
            }

            .input-group .form-control {
                padding-left: 45px;
            }

            .input-icon {
                font-size: 16px;
                left: 12px;
            }
        }

        /* Print styles */
        @@media print {
            .upload-btn,
            .form-actions,
            .loading-overlay {
                display: none !important;
            }

            .profile-edit-container {
                box-shadow: none;
                border: 1px solid #000;
            }

            .form-control {
                border: 1px solid #000;
                background: white !important;
            }
        }

        /* High contrast mode */
        @@media (prefers-contrast: high) {
            .form-control:focus {
                border-width: 3px;
            }

            .btn-primary {
                background: #000 !important;
                border: 2px solid #fff;
            }

            .field-validation-error {
                font-weight: bold;
            }
        }

        /* Reduced motion */
        @@media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    </style>


}

<div class="profile-edit-container">
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <div class="profile-header">
        <h1 class="profile-title">Edit Your Profile</h1>
        <p class="profile-subtitle">Keep your information up to date</p>
    </div>

   
    @using (Html.BeginForm("EditProfile", "Profile", FormMethod.Post, new { enctype = "multipart/form-data", @class = "profile-form" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)

        <!-- Image Upload Section -->
        <div class="form-section">
            <div class="image-upload-section">
                <div class="current-profile-image" onclick="document.getElementById('profileImageInput').click()">
                    @if (!string.IsNullOrEmpty(Model.ImgPath))
                    {
                        <img src="@Model.ImgPath" alt="Profile Image" id="profileImagePreview" />
                    }
                    else
                    {
                        <i class="fas fa-user image-placeholder" id="profileImagePlaceholder"></i>
                    }
                </div>
                <button type="button" class="upload-btn" onclick="document.getElementById('profileImageInput').click()">
                    <i class="fas fa-camera"></i>
                    Change Profile Picture
                </button>
                <input type="file" id="profileImageInput" name="ProfileImage" accept="image/*" style="display: none;" onchange="previewImage(event)" />
                <small style="color: var(--text-light); margin-top: 10px;">
                    Supported formats: JPG, PNG, GIF (Max 5MB)
                </small>
            </div>
        </div>

        <!-- Basic Information -->
        <div class="form-section">
            <h3 class="section-title">
                <i class="fas fa-user"></i>
                Basic Information
            </h3>
            
            <div class="form-grid">
                <div class="form-group">
                    @Html.LabelFor(m => m.Name, new { @class = "form-label required" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Enter your full name", required = "required" })
                        <i class="fas fa-user input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Email, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Enter your email", type = "email" })
                        <i class="fas fa-envelope input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.PhoneNumber, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", placeholder = "Enter your phone number" })
                        <i class="fas fa-phone input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Location, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.Location, new { @class = "form-control", placeholder = "Enter your location" })
                        <i class="fas fa-map-marker-alt input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.Location, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group full-width">
                    @Html.LabelFor(m => m.Bio, new { @class = "form-label" })
                    @Html.TextAreaFor(m => m.Bio, new { @class = "form-control", placeholder = "Tell us about yourself...", rows = 4 })
                    @Html.ValidationMessageFor(m => m.Bio, "", new { @class = "field-validation-error" })
                </div>
            </div>
        </div>

        <!-- Professional Information -->
        <div class="form-section">
            <h3 class="section-title">
                <i class="fas fa-briefcase"></i>
                Professional Information
            </h3>
            
            <div class="form-grid">
                <div class="form-group">
                    @Html.LabelFor(m => m.Title, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control", placeholder = "e.g., Software Developer" })
                        <i class="fas fa-id-badge input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.Title, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Company, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.Company, new { @class = "form-control", placeholder = "Enter your company" })
                        <i class="fas fa-building input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.Company, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Industry, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.Industry, new { @class = "form-control", placeholder = "e.g., Technology, Healthcare" })
                        <i class="fas fa-industry input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.Industry, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.YearsOfExperience, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.YearsOfExperience, new { @class = "form-control", placeholder = "Years of experience", type = "number", min = "0", max = "50" })
                        <i class="fas fa-calendar input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.YearsOfExperience, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Status, new { @class = "form-label" })
                    @Html.DropDownListFor(m => m.Status, new SelectList(new[] { 
                        new { Value = "", Text = "Select Status" },
                        new { Value = "Available", Text = "Available" },
                        new { Value = "Busy", Text = "Busy" },
                        new { Value = "Do Not Disturb", Text = "Do Not Disturb" },
                        new { Value = "Away", Text = "Away" }
                    }, "Value", "Text"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "field-validation-error" })
                </div>
            </div>
        </div>

        <!-- Contact & Social Links -->
        <div class="form-section">
            <h3 class="section-title">
                <i class="fas fa-link"></i>
                Contact & Social Links
            </h3>
            
            <div class="form-grid">
                <div class="form-group">
                    @Html.LabelFor(m => m.LinkedInUrl, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.LinkedInUrl, new { @class = "form-control", placeholder = "https://linkedin.com/in/username", type = "url" })
                        <i class="fab fa-linkedin input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.LinkedInUrl, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.GitHubUrl, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.GitHubUrl, new { @class = "form-control", placeholder = "https://github.com/username", type = "url" })
                        <i class="fab fa-github input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.GitHubUrl, "", new { @class = "field-validation-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.PortfolioUrl, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.PortfolioUrl, new { @class = "form-control", placeholder = "https://yourportfolio.com", type = "url" })
                        <i class="fas fa-globe input-icon"></i>
                    </div>
                    @Html.ValidationMessageFor(m => m.PortfolioUrl, "", new { @class = "field-validation-error" })
                </div>
            </div>
        </div>

        <!-- Premium Settings -->
        <div class="form-section">
            <h3 class="section-title">
                <i class="fas fa-crown"></i>
                Account Settings
            </h3>
            
            <div class="checkbox-group">
                <label class="custom-checkbox">
                    @Html.CheckBoxFor(m => m.IsPremiumMember)
                    <span>Premium Member</span>
                </label>
            </div>
        </div>

        <!-- Form Actions -->
        <div class="form-actions">
            <button type="submit" class="btn-primary">
                <i class="fas fa-save"></i>
                Save Changes
            </button>
            <a href="@Url.Action("Index", "Account")" class="btn-secondary">
                <i class="fas fa-times"></i>
                Cancel
            </a>
        </div>
    }
</div>

@section Scripts {
     <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script> 
     <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script> 
    
    <script>
        // Image preview functionality
        function previewImage(event) {
            const file = event.target.files[0];
            if (file) {
                // Validate file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    alert('File size must be less than 5MB');
                    event.target.value = '';
                    return;
                }

                // Validate file type
                const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
                if (!validTypes.includes(file.type)) {
                    alert('Please select a valid image file (JPG, PNG, GIF)');
                    event.target.value = '';
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('profileImagePreview');
                    const placeholder = document.getElementById('profileImagePlaceholder');
                    
                    if (preview) {
                        preview.src = e.target.result;
                    } else {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.alt = 'Profile Image';
                        img.id = 'profileImagePreview';
                        img.style.width = '100%';
                        img.style.height = '100%';
                        img.style.objectFit = 'cover';
                        img.style.borderRadius = '50%';
                        
                        const container = document.querySelector('.current-profile-image');
                        if (placeholder) {
                            container.removeChild(placeholder);
                        }
                        container.appendChild(img);
                    }
                };
                reader.readAsDataURL(file);
            }
        }

        // Form submission with loading overlay
        $(document).ready(function() {
            $('.profile-form').on('submit', function() {
                if ($(this).valid()) {
                    $('#loadingOverlay').show();
                }
            });

            // Real-time validation styling
            $('input, select, textarea').on('blur', function() {
                const $this = $(this);
                if ($this.valid()) {
                    $this.removeClass('is-invalid').addClass('is-valid');
                } else {
                    $this.removeClass('is-valid').addClass('is-invalid');
                }
            });

            // URL validation
            $('input[type="url"]').on('blur', function() {
                const url = $(this).val();
                if (url && !isValidUrl(url)) {
                    $(this).addClass('is-invalid');
                }
            });

            function isValidUrl(string) {
                try {
                    new URL(string);
                    return true;
                } catch (_) {
                    return false;
                }
            }

            // Phone number formatting (simple)
            $('input[name="PhoneNumber"]').on('input', function() {
                let value = $(this).val().replace(/\D/g, '');
                if (value.length >= 10) {
                    value = value.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
                }
                $(this).val(value);
            });

            // Auto-save indication (optional)
            let saveTimer;
            $('input, select, textarea').on('input', function() {
                clearTimeout(saveTimer);
                saveTimer = setTimeout(function() {
                    // Could implement auto-save functionality here
                    console.log('Auto-save triggered');
                }, 2000);
            });

            // Character count for bio
            const bioField = $('textarea[name="Bio"]');
            if (bioField.length) {
                const maxLength = 500;
                bioField.after('<div class="char-counter" style="text-align: right; font-size: 12px; color: var(--text-light); margin-top: 5px;">0/' + maxLength + '</div>');
                
                bioField.on('input', function() {
                    const length = $(this).val().length;
                    const counter = $(this).siblings('.char-counter');
                    counter.text(length + '/' + maxLength);
                    
                    if (length > maxLength * 0.9) {
                        counter.css('color', 'var(--accent-orange)');
                    } else {
                        counter.css('color', 'var(--text-light)');
                    }
                });
            }

            // Enhanced form validation
            $.validator.addMethod("phoneUS", function(phone_number, element) {
                phone_number = phone_number.replace(/\s+/g, "");
                return this.optional(element) || phone_number.length > 9 &&
                    phone_number.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]([02-9]\d|1[02-9])-?\d{4}$/);
            }, "Please specify a valid phone number");

            $.validator.addMethod("linkedinUrl", function(value, element) {
                return this.optional(element) || /^https?:\/\/(www\.)?linkedin\.com\/in\/[a-zA-Z0-9-]+\/?$/i.test(value);
            }, "Please enter a valid LinkedIn profile URL");

            $.validator.addMethod("githubUrl", function(value, element) {
                return this.optional(element) || /^https?:\/\/(www\.)?github\.com\/[a-zA-Z0-9-]+\/?$/i.test(value);
            }, "Please enter a valid GitHub profile URL");

            // Apply custom validation rules
            $('input[name="PhoneNumber"]').rules("add", {
                phoneUS: true
            });

            $('input[name="LinkedInUrl"]').rules("add", {
                linkedinUrl: true
            });

            $('input[name="GitHubUrl"]').rules("add", {
                githubUrl: true
            });

            // Smooth scroll to first error
            $(document).on('invalid-form.validate', '.profile-form', function() {
                const firstError = $(this).find('.field-validation-error:visible').first();
                if (firstError.length) {
                    $('html, body').animate({
                        scrollTop: firstError.closest('.form-group').offset().top - 100
                    }, 500);
                }
            });

            // Success message handling (if redirected back with success message)
            @if (ViewBag.SuccessMessage != null)
            {
                <text>
                showSuccessMessage('@ViewBag.SuccessMessage');
                </text>
            }

            function showSuccessMessage(message) {
                const successAlert = $('<div class="alert alert-success" style="position: fixed; top: 100px; right: 20px; z-index: 2000; background: linear-gradient(135deg, var(--accent-green), #00f5a0); color: white; padding: 15px 20px; border-radius: 10px; box-shadow: var(--shadow-strong); animation: slideInRight 0.5s ease-out;">' +
                    '<i class="fas fa-check-circle" style="margin-right: 10px;"></i>' + message +
                    '<button type="button" class="close" style="background: none; border: none; color: white; font-size: 18px; margin-left: 15px; cursor: pointer;">&times;</button>' +
                    '</div>');
                
                $('body').append(successAlert);
                
                successAlert.find('.close').on('click', function() {
                    successAlert.fadeOut(300, function() {
                        $(this).remove();
                    });
                });

                setTimeout(function() {
                    successAlert.fadeOut(300, function() {
                        $(this).remove();
                    });
                }, 5000);
            }

            // Keyboard navigation enhancement
            $(document).keydown(function(e) {
                // Save with Ctrl+S
                if (e.ctrlKey && e.key === 's') {
                    e.preventDefault();
                    if ($('.profile-form').valid()) {
                        $('.profile-form').submit();
                    }
                }
                
                // Cancel with Escape
                if (e.key === 'Escape') {
                    if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
                        window.location.href = '@Url.Action("Details", "Profile")';
                    }
                }
            });

            // Detect unsaved changes
            let formChanged = false;
            $('input, select, textarea').on('change input', function() {
                formChanged = true;
            });

            $(window).on('beforeunload', function() {
                if (formChanged) {
                    return 'You have unsaved changes. Are you sure you want to leave?';
                }
            });

            $('.profile-form').on('submit', function() {
                formChanged = false;
            });

            // Progressive enhancement for file upload
            if (window.File && window.FileReader && window.FileList && window.Blob) {
                // Drag and drop functionality
                const uploadSection = $('.image-upload-section')[0];
                
                uploadSection.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    $(this).addClass('dragover');
                }, false);

                uploadSection.addEventListener('dragleave', function(e) {
                    e.preventDefault();
                    $(this).removeClass('dragover');
                }, false);

                uploadSection.addEventListener('drop', function(e) {
                    e.preventDefault();
                    $(this).removeClass('dragover');
                    
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        const fileInput = document.getElementById('profileImageInput');
                        fileInput.files = files;
                        previewImage({ target: fileInput });
                    }
                }, false);
            }

            // Add drag over styles
            $('<style>')
                .prop('type', 'text/css')
                .html('.image-upload-section.dragover { border-color: var(--primary-blue) !important; background: linear-gradient(135deg, rgba(27, 132, 255, 0.2), rgba(246, 192, 0, 0.2)) !important; transform: scale(1.02); }')
                .appendTo('head');

            // Form field animations
            $('.form-control').on('focus', function() {
                $(this).closest('.form-group').addClass('focused');
            });

            $('.form-control').on('blur', function() {
                $(this).closest('.form-group').removeClass('focused');
            });

            // Add focus styles
            $('<style>')
                .prop('type', 'text/css')
                .html('.form-group.focused { transform: translateY(-2px); } .form-group.focused .form-label { color: var(--primary-blue); font-weight: 700; }')
                .appendTo('head');
        });

        // Additional validation for server-side integration
        function validateForm() {
            let isValid = true;
            const errors = [];

            // Name validation
            const name = $('input[name="Name"]').val().trim();
            if (!name) {
                errors.push('Name is required');
                isValid = false;
            } else if (name.length < 2) {
                errors.push('Name must be at least 2 characters long');
                isValid = false;
            }

            // Email validation
            const email = $('input[name="Email"]').val().trim();
            if (email) {
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailRegex.test(email)) {
                    errors.push('Please enter a valid email address');
                    isValid = false;
                }
            }

            // Years of experience validation
            const experience = $('input[name="YearsOfExperience"]').val();
            if (experience && (experience < 0 || experience > 50)) {
                errors.push('Years of experience must be between 0 and 50');
                isValid = false;
            }

            // Bio length validation
            const bio = $('textarea[name="Bio"]').val();
            if (bio && bio.length > 500) {
                errors.push('Bio cannot exceed 500 characters');
                isValid = false;
            }

            if (!isValid) {
                console.log('Validation errors:', errors);
            }

            return isValid;
        }

        // Accessibility enhancements
        $(document).ready(function() {
            // Add ARIA labels
            $('input[required]').attr('aria-required', 'true');
            $('.field-validation-error').attr('role', 'alert');
            
            // Focus management
            if (window.location.hash) {
                const target = $(window.location.hash);
                if (target.length) {
                    target.find('input, select, textarea').first().focus();
                }
            }
        });
    </script>

}
                    