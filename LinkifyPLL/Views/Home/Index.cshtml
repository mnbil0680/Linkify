@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

@model List<PostMV>
@functions {
    string FormatSince(TimeSpan since)
    {
        if (since.TotalMinutes < 60)
            return $"{since.TotalMinutes:0} min ago";
        if (since.TotalHours < 24)
            return $"{since.TotalHours:0} hour{(since.TotalHours >= 2 ? "s" : "")} ago";
        if (since.TotalDays < 30)
            return $"{since.TotalDays:0} day{(since.TotalDays >= 2 ? "s" : "")} ago";
        return $"{(since.TotalDays / 30):0} month{(since.TotalDays / 30 >= 2 ? "s" : "")} ago";
    }
}
@functions {
    bool HasUserReacted(IEnumerable<CommentReactionMV> reactions, string userId, string reactionType)
    {
        return reactions != null && reactions.Any(r =>
            r.ReactorId == userId &&
            r.Reaction.ToString() == reactionType &&
            (r.IsDeleted == false || r.IsDeleted == null)
        );
    }
}
@functions {
    bool HasUserReactedToPost(IEnumerable<PostReactionMV> reactions, string userId, string reactionType)
    {
        return reactions != null && reactions.Any(r =>
            r.ReactorId == userId &&
            r.Reaction.ToString() == reactionType &&
            (r.IsDeleted == false || r.IsDeleted == null)
        );
    }
}

@section Styles {
    <style>


        .post-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            padding: 20px;
            max-width: 500px;
            width: 100%;
        }

        .post-content {
            margin-bottom: 15px;
            color: #1c1e21;
            font-size: 16px;
            line-height: 1.4;
        }

        .post-actions {
            border-top: 1px solid #e4e6ea;
            padding-top: 12px;
            display: flex;
            justify-content: space-between;
        }

        .reactions-container {
            position: relative;
            display: inline-block;
        }

        .reactions-button {
            background: none;
            border: none;
            color: #65676b;
            font-size: 14px;
            font-weight: 600;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 6px;
        }

            .reactions-button:hover {
                background-color: #f2f3f5;
            }

        .reactions-popup {
            position: absolute;
            bottom: 100%;
            left: 0;
            background: white;
            border-radius: 25px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
            padding: 8px 12px;
            display: flex;
            gap: 8px;
            opacity: 0;
            visibility: hidden;
            transform: translateY(10px) scale(0.8);
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            margin-bottom: 8px;
            white-space: nowrap;
        }

        .reactions-container:hover .reactions-popup {
            opacity: 1;
            visibility: visible;
            transform: translateY(0) scale(1);
        }

        .reaction-item {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.15s ease;
            font-size: 32px;
            position: relative;
        }

            .reaction-item:hover {
                transform: scale(1.3);
            }

            .reaction-item::after {
                content: attr(data-label);
                position: absolute;
                bottom: -35px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 4px 8px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: 500;
                white-space: nowrap;
                opacity: 0;
                pointer-events: none;
                transition: opacity 0.2s;
            }

            .reaction-item:hover::after {
                opacity: 1;
            }

        .like {
            color: #1877f2;
        }

        .love {
            color: #e91e63;
        }

        .haha {
            color: #f39c12;
        }

        .angry {
            color: #e74c3c;
        }

        .sad {
            color: #2196f3;
        }



        .support {
            color: #9b59b6;
        }

        /* Reaction backgrounds for better visibility */
        .reaction-item.like {
            background: linear-gradient(135deg, #1877f2, #42a5f5);
        }

        .reaction-item.love {
            background: linear-gradient(135deg, #e91e63, #f06292);
        }

        .reaction-item.haha {
            background: linear-gradient(135deg, #f39c12, #ffb74d);
        }

        .reaction-item.angry {
            background: linear-gradient(135deg, #e74c3c, #ef5350);
        }

        .reaction-item.support {
            background: linear-gradient(135deg, #9b59b6, #ba68c8);
        }

        .reaction-item.sad {
            background: linear-gradient(135deg, #2196f3, #90caf9);
        }


        .reaction-item {
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        /* Action buttons */
        .action-button {
            background: none;
            border: none;
            color: #65676b;
            font-size: 14px;
            font-weight: 600;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .action-button:hover {
                background-color: #f2f3f5;
            }

        /* Selected reaction state */
        .reactions-button.active {
            color: #1877f2;
        }

        .selected-reaction {
            font-size: 16px;
        }

        /* Demo post styling */
        .demo-note {
            text-align: center;
            color: #65676b;
            font-size: 14px;
            margin-bottom: 20px;
            font-style: italic;
        }
    </style>

    <style>
        /* Feed Posts Styling */
        .feed-posts {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 20px;
        }

        .post-card {
            background: var(--card-background, #ffffff);
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color, #e1e5e9);
            overflow: hidden;
            transition: box-shadow 0.3s ease;
        }

            .post-card:hover {
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }

        /* Post Header */
        .post-header {
            display: flex;
            align-items: flex-start;
            padding: 16px 20px 12px;
            gap: 12px;
        }

        .post-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            object-fit: cover;
            flex-shrink: 0;
        }

        .post-author-info {
            flex: 1;
            min-width: 0;
        }

        .post-author-name {
            font-size: 15px;
            font-weight: 600;
            color: var(--text-primary, #1d2129);
            margin: 0 0 2px 0;
            line-height: 1.3;
        }

        .post-author-title {
            font-size: 13px;
            color: var(--text-secondary, #65676b);
            margin: 0 0 4px 0;
            line-height: 1.3;
        }

        .post-meta {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 12px;
            color: var(--text-tertiary, #8a8d91);
        }

        .post-visibility {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .post-menu-btn {
            background: none;
            border: none;
            padding: 8px;
            border-radius: 6px;
            color: var(--text-secondary, #65676b);
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .post-menu-btn:hover {
                background-color: var(--hover-background, #f2f3f5);
            }

        /* Post Content */
        .post-content {
            padding: 0 20px 16px;
        }

        .post-text {
            font-size: 15px;
            line-height: 1.5;
            color: var(--text-primary, #1d2129);
            margin: 0 0 12px 0;
            white-space: pre-wrap;
        }

        .post-media {
            margin-top: 12px;
            border-radius: 8px;
            overflow: hidden;
        }

        .post-image {
            width: 100%;
            height: auto;
            display: block;
            max-height: 500px;
            object-fit: cover;
        }

        /* Post Footer */
        .post-footer {
            border-top: 1px solid var(--border-color, #e1e5e9);
        }

        .post-reactions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 13px;
            color: var(--text-secondary, #65676b);
        }

        .reaction-summary {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .reaction-icons {
            display: flex;
            gap: 2px;
        }

        .reaction-icon {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            border: 2px solid #ffffff;
            margin-left: -2px;
        }

            .reaction-icon:first-child {
                margin-left: 0;
            }

        .post-stats {
            display: flex;
            gap: 12px;
        }

        .post-actions {
            display: flex;
            border-top: 1px solid var(--border-color, #e1e5e9);
        }

        .action-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 8px;
            background: none;
            border: none;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary, #65676b);
            cursor: pointer;
            transition: background-color 0.2s ease;
            border-radius: 0;
        }

            .action-btn:hover {
                background-color: var(--hover-background, #f2f3f5);
            }

            .action-btn i {
                font-size: 16px;
            }

        /* Dark theme support */
        [data-theme="dark"] .post-card {
            --card-background: #242526;
            --border-color: #3a3b3c;
            --text-primary: #e4e6ea;
            --text-secondary: #b0b3b8;
            --text-tertiary: #8a8d91;
            --hover-background: #3a3b3c;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .post-card {
                border-radius: 0;
                margin: 0 -16px;
                border-left: none;
                border-right: none;
            }

            .post-header {
                padding: 12px 16px 8px;
            }

            .post-content {
                padding: 0 16px 12px;
            }



            .action-btn {
                padding: 10px 4px;
                font-size: 13px;
            }

                .action-btn span {
                    display: none;
                }
        }

        @@media (max-width: 480px) {
            .post-stats {
                flex-direction: column;
                gap: 4px;
                align-items: flex-end;
            }

            .reaction-count {
                font-size: 12px;
            }
        }
    </style>

    <style>
        /* Enhanced Post Actions Menu */
        .post-actions-menu {
            display: flex;
            align-items: center;
            gap: 8px;
            position: relative;
        }

        /* Enhanced Bookmark Button */
        .bookmark-btn {
            background: none;
            border: none;
            padding: 8px;
            border-radius: 8px;
            color: var(--text-secondary, #65676b);
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

            .bookmark-btn:hover {
                background-color: var(--hover-background, #f2f3f5);
                color: var(--primary-blue, #1877f2);
                transform: scale(1.1);
            }

            .bookmark-btn.saved {
                color: var(--warning-orange, #f5b800);
                background-color: rgba(245, 184, 0, 0.1);
            }

                .bookmark-btn.saved:hover {
                    background-color: rgba(245, 184, 0, 0.2);
                    color: var(--warning-orange, #f5b800);
                }

            /* Bookmark Animation */
            .bookmark-btn i {
                transition: all 0.3s ease;
                font-size: 16px;
            }

            .bookmark-btn.saving i {
                animation: bookmarkPulse 0.6s ease-in-out;
            }

        @@keyframes bookmarkPulse {
            0%, 100% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.3);
            }
        }

        /* Ripple Effect for Bookmark */
        .bookmark-btn::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(245, 184, 0, 0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
            pointer-events: none;
            opacity: 0;
        }

        .bookmark-btn.animate::after {
            width: 40px;
            height: 40px;
            opacity: 1;
        }

        /* Enhanced Post Menu Button */
        .post-menu-btn {
            background: none;
            border: none;
            padding: 8px;
            border-radius: 8px;
            color: var(--text-secondary, #65676b);
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .post-menu-btn:hover {
                background-color: var(--hover-background, #f2f3f5);
                color: var(--text-primary, #1d2129);
            }

        /* Dropdown Menu Enhancements */
        .dropdown-menu {
            min-width: 200px;
            padding: 8px 0;
            border: 1px solid var(--border-color, #e1e5e9);
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            background: var(--card-background, #ffffff);
            z-index: 1000;
        }

        .dropdown-item {
            padding: 12px 16px;
            color: var(--text-primary, #1d2129);
            text-decoration: none;
            display: flex;
            align-items: center;
            font-size: 14px;
            transition: background-color 0.2s ease;
        }

            .dropdown-item:hover {
                background-color: var(--hover-background, #f2f3f5);
                color: var(--text-primary, #1d2129);
                text-decoration: none;
            }

            .dropdown-item i {
                width: 16px;
                color: var(--text-secondary, #65676b);
            }

        .dropdown-divider {
            margin: 8px 0;
            border-top: 1px solid var(--border-color, #e1e5e9);
        }

        /* Bookmark Success Toast */
        .bookmark-toast {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--card-background, #ffffff);
            border: 1px solid var(--border-color, #e1e5e9);
            border-radius: 12px;
            padding: 12px 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 12px;
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
            transition: all 0.3s ease;
        }

            .bookmark-toast.show {
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }

            .bookmark-toast i {
                color: var(--success-green, #42a5f5);
                font-size: 18px;
            }

        /* Dark Theme Support */
        [data-theme="dark"] .bookmark-btn {
            color: var(--text-secondary, #b0b3b8);
        }

            [data-theme="dark"] .bookmark-btn:hover {
                background-color: var(--hover-background, #3a3b3c);
                color: var(--primary-blue, #58a6ff);
            }

            [data-theme="dark"] .bookmark-btn.saved {
                color: var(--warning-orange, #ffa726);
                background-color: rgba(255, 167, 38, 0.1);
            }

        [data-theme="dark"] .dropdown-menu {
            background: var(--card-background, #242526);
            border-color: var(--border-color, #3a3b3c);
        }

        [data-theme="dark"] .dropdown-item {
            color: var(--text-primary, #e4e6ea);
        }

            [data-theme="dark"] .dropdown-item:hover {
                background-color: var(--hover-background, #3a3b3c);
            }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .post-actions-menu {
                gap: 4px;
            }

            .bookmark-btn,
            .post-menu-btn {
                padding: 6px;
            }

                .bookmark-btn i {
                    font-size: 14px;
                }
        }
    </style>

}

    @if (Model != null && Model.Any())
{
    foreach (var post in Model)
    {
        <article class="post-card" role="article">
            <header class="post-header">
                <img src="@(post.PostUserImg)" alt="@post.PostUserName" class="post-avatar" />
                <div class="post-author-info">
                    <h4 class="post-author-name">@post.PostUserName</h4>
                    <p class="post-author-title">@post.PostUserTitle</p>
                    <div class="post-meta">
                        <time>@(post.Since.TotalHours < 1 ? $"{post.Since.Minutes} min ago" : $"{(int)post.Since.TotalHours} hours ago")</time>
                        <span class="post-visibility">
                            <i class="fas fa-globe-americas"></i> Public
                        </span>
                    </div>
                </div>

                <!-- Enhanced Bookmark Section -->
                <div class="post-actions-menu">
                    <button class="bookmark-btn @(post.IsSavedByCurrentUser ? "saved" : "")"
                            data-post-id="@post.postId"
                            data-saved="@post.IsSavedByCurrentUser.ToString().ToLower()"
                            onclick="toggleBookmark(this, @post.postId)"
                            title="@(post.IsSavedByCurrentUser ? "Remove from saved posts" : "Save post")"
                            aria-label="@(post.IsSavedByCurrentUser ? "Remove from saved posts" : "Save post")">
                        <i class="@(post.IsSavedByCurrentUser ? "fas fa-bookmark" : "far fa-bookmark")"></i>
                    </button>

                    <button class="post-menu-btn" aria-label="Post options" data-bs-toggle="dropdown">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>

                    <!-- Dropdown Menu -->
                    <div class="dropdown-menu dropdown-menu-end">
                        <a class="dropdown-item" href="#" onclick="sharePost(@post.postId)">
                            <i class="fas fa-share me-2"></i>Share post
                        </a>
                        <a class="dropdown-item" href="#" onclick="reportPost(@post.postId)">
                            <i class="fas fa-flag me-2"></i>Report post
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick="hidePost(@post.postId)">
                            <i class="fas fa-eye-slash me-2"></i>Hide post
                        </a>
                    </div>
                </div>


            </header>

            <div class="post-content">
                @if (!string.IsNullOrWhiteSpace(post.TextContent))
                {
                    <p class="post-text">@post.TextContent</p>
                }
                @if (post.Images != null && post.Images.Any())
                {
                    <div class="post-media">
                        @foreach (var img in post.Images)
                        {
                            <img src="@img" alt="Post image" class="post-image" />
                        }
                    </div>
                }
            </div>

            <footer class="post-footer">
                <div class="post-reactions">
                    <div class="reaction-summary">
                        <div class="reaction-icons">
                            <span class="reaction-icon like">👍</span>
                            <span class="reaction-icon love">❤</span>
                            <span class="reaction-icon haha">😂</span>
                            <span class="reaction-icon angry">😡</span>
                            <span class="reaction-icon support">🤗</span>
                        </div>
                        <span class="reaction-count">@post.ReactionCount reactions</span>
                    </div>
                    <div class="post-stats">
                        <span class="comment-count">@((post.CommentsCount.ToString() ?? "0")) comments</span>
                        <span class="share-count">@post.NumberOfShares shares</span>
                    </div>
                </div>
                <div class="post-actions">
                    <div class="reactions-container">
                        <button class="reactions-button" type="button">
                            <span class="selected-reaction">👍</span>
                            <span class="reaction-text">Like</span>
                        </button>
                        <div class="reactions-popup">
                            <div class="reaction-item like" data-label="Like" data-reaction="like">👍</div>
                            <div class="reaction-item love" data-label="Love" data-reaction="love">❤</div>
                            <div class="reaction-item haha" data-label="Haha" data-reaction="haha">😂</div>
                            <div class="reaction-item sad" data-label="Sad" data-reaction="sad">😢</div>
                            <div class="reaction-item angry" data-label="Angry" data-reaction="angry">😡</div>
                        </div>
                    </div>
                    <button class="action-btn" aria-label="Comment on post">
                        <i class="far fa-comment"></i>
                        <span>Comment</span>
                    </button>
                    <button class="action-btn" aria-label="Share post">
                        <i class="far fa-share"></i>
                        <span>Share</span>
                    </button>
                    <button class="action-btn" aria-label="Send post">
                        <i class="far fa-paper-plane"></i>
                        <span>Send</span>
                    </button>
                </div>
            </footer>
        </article>
    }
}
else
{
    <div class="demo-note">No posts to display.</div>
}

<div class="reactions-popup">
    <div class="reaction-item like"
         data-label="Like"
         data-reaction="like">
        👍
    </div>
    <div class="reaction-item love"
         data-label="Love"
         data-reaction="love">
        ❤
    </div>
    <div class="reaction-item haha"
         data-label="Haha"
         data-reaction="haha">
        😂
    </div>
    <div class="reaction-item angry"
         data-label="Angry"
         data-reaction="angry">
        😡
    </div>
    <div class="reaction-item sad"
         data-label="Sad"
         data-reaction="sad">
        😢
    </div>
</div>


@section Scripts {
    <script>
            // Reaction data
                    const reactions = {
            like: { emoji: "👍", text: "Like", color: "#1877f2" },
            love: { emoji: "❤", text: "Love", color: "#e91e63" },
            haha: { emoji: "😂", text: "Haha", color: "#f39c12" },
            sad: { emoji: "😢", text: "Sad", color: "#2196f3" },
            angry: { emoji: "😡", text: "Angry", color: "#e74c3c" },
        };


            let currentReaction = "like";

            // Get elements
            const reactionsBtn = document.getElementById("reactionsBtn");
            const reactionItems = document.querySelectorAll(".reaction-item");
            const selectedReactionSpan =
                reactionsBtn.querySelector(".selected-reaction");
            const reactionTextSpan =
                reactionsBtn.querySelector(".reaction-text");

            // Add click handlers to reaction items
            reactionItems.forEach((item) => {
                item.addEventListener("click", (e) => {
                    e.stopPropagation();
                    const reaction = item.dataset.reaction;
                    selectReaction(reaction);
                });
            });

            function selectReaction(reactionKey) {
                currentReaction = reactionKey;
                const reaction = reactions[reactionKey];

                // Update button appearance
                selectedReactionSpan.textContent = reaction.emoji;
                reactionTextSpan.textContent = reaction.text;
                reactionsBtn.style.color = reaction.color;
                reactionsBtn.classList.add("active");

                // Add a small animation
                selectedReactionSpan.style.transform = "scale(1.2)";
                setTimeout(() => {
                    selectedReactionSpan.style.transform = "scale(1)";
                }, 150);
            }

            // Add some hover effects and sounds (visual feedback)
            reactionItems.forEach((item) => {
                item.addEventListener("mouseenter", () => {
                    // Add a subtle pulse effect
                    item.style.animation = "pulse 0.6s ease-in-out";
                });

                item.addEventListener("mouseleave", () => {
                    item.style.animation = "";
                });
            });

            // CSS animation for pulse effect
            const style = document.createElement("style");
            style.textContent = `
        @@keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.4); }
                100% { transform: scale(1.3); }
            }

            .selected-reaction {
                transition: transform 0.15s ease;
            }
        `;
            document.head.appendChild(style);
    </script>
    <script>
                // Enhanced Bookmark Functionality
        function toggleBookmark(button, postId) {
            const icon = button.querySelector('i');
            const isSaved = button.dataset.saved === 'true';

            // Add loading state
            button.classList.add('saving');
            button.disabled = true;

            // Simulate API call (replace with actual endpoint)
            fetch(/api/posts/${postId}/bookmark, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    isSaved: !isSaved,
                    postId: postId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update button state
                    const newSavedState = !isSaved;
                    button.dataset.saved = newSavedState.toString();
                    button.classList.toggle('saved', newSavedState);

                    // Update icon
                    icon.className = newSavedState ? 'fas fa-bookmark' : 'far fa-bookmark';

                    // Update tooltip
                    button.title = newSavedState ? 'Remove from saved posts' : 'Save post';
                    button.setAttribute('aria-label', newSavedState ? 'Remove from saved posts' : 'Save post');

                    // Add animation effect
                    button.classList.add('animate');
                    setTimeout(() => button.classList.remove('animate'), 300);

                    // Show success toast
                    showBookmarkToast(newSavedState ? 'Post saved!' : 'Post removed from saved');
                } else {
                    showBookmarkToast('Failed to update bookmark. Please try again.', 'error');
                }
            })
            .catch(error => {
                console.error('Bookmark error:', error);
                showBookmarkToast('Failed to update bookmark. Please try again.', 'error');
            })
            .finally(() => {
                // Remove loading state
                button.classList.remove('saving');
                button.disabled = false;
            });
        }

        // Bookmark Toast Notification
        function showBookmarkToast(message, type = 'success') {
            // Remove existing toast
            const existingToast = document.querySelector('.bookmark-toast');
            if (existingToast) {
                existingToast.remove();
            }

            // Create new toast
            const toast = document.createElement('div');
            toast.className = 'bookmark-toast';
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                <span>${message}</span>
            `;

            // Add to DOM
            document.body.appendChild(toast);

            // Show with animation
            setTimeout(() => toast.classList.add('show'), 100);

            // Hide after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Additional Post Actions
        function sharePost(postId) {
            // Implement share functionality
            console.log('Sharing post:', postId);
            showBookmarkToast('Share functionality coming soon!', 'info');
        }

        function reportPost(postId) {
            // Implement report functionality
            console.log('Reporting post:', postId);
            if (confirm('Are you sure you want to report this post?')) {
                showBookmarkToast('Post reported. Thank you for helping keep our community safe.', 'success');
            }
        }

        function hidePost(postId) {
            // Implement hide post functionality
            console.log('Hiding post:', postId);
            const postCard = document.querySelector([data-post-id="${postId}"])?.closest('.post-card');
            if (postCard && confirm('Hide this post from your feed?')) {
                postCard.style.transition = 'all 0.3s ease';
                postCard.style.opacity = '0';
                postCard.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    postCard.style.display = 'none';
                    showBookmarkToast('Post hidden from your feed');
                }, 300);
            }
        }

        // Initialize bookmark functionality on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Add post IDs to post cards for easier reference
            document.querySelectorAll('.post-card').forEach((card, index) => {
                const bookmarkBtn = card.querySelector('.bookmark-btn');
                if (bookmarkBtn) {
                    const postId = bookmarkBtn.dataset.postId;
                    card.setAttribute('data-post-id', postId);
                }
            });

            // Initialize Bootstrap dropdowns
            if (typeof bootstrap !== 'undefined') {
                const dropdowns = document.querySelectorAll('[data-bs-toggle="dropdown"]');
                dropdowns.forEach(dropdown => {
                    new bootstrap.Dropdown(dropdown);
                });
            }
        });

    </script>
}