@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

@model List<PostMV>
@section Styles{
    <style>


        .post-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            padding: 20px;
            max-width: 500px;
            width: 100%;
        }

        .post-content {
            margin-bottom: 15px;
            color: #1c1e21;
            font-size: 16px;
            line-height: 1.4;
        }

        .post-actions {
            border-top: 1px solid #e4e6ea;
            padding-top: 12px;
            display: flex;
            justify-content: space-between;
        }

        .reactions-container {
            position: relative;
            display: inline-block;
        }

        .reactions-button {
            background: none;
            border: none;
            color: #65676b;
            font-size: 14px;
            font-weight: 600;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .reactions-button:hover {
            background-color: #f2f3f5;
        }

        .reactions-popup {
            position: absolute;
            bottom: 100%;
            left: 0;
            background: white;
            border-radius: 25px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
            padding: 8px 12px;
            display: flex;
            gap: 8px;
            opacity: 0;
            visibility: hidden;
            transform: translateY(10px) scale(0.8);
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            margin-bottom: 8px;
            white-space: nowrap;
        }

        .reactions-container:hover .reactions-popup {
            opacity: 1;
            visibility: visible;
            transform: translateY(0) scale(1);
        }

        .reaction-item {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.15s ease;
            font-size: 32px;
            position: relative;
        }

        .reaction-item:hover {
            transform: scale(1.3);
        }

        .reaction-item::after {
            content: attr(data-label);
            position: absolute;
            bottom: -35px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s;
        }

        .reaction-item:hover::after {
            opacity: 1;
        }

        .like {
            color: #1877f2;
        }

        .love {
            color: #e91e63;
        }

        .haha {
            color: #f39c12;
        }

        .angry {
            color: #e74c3c;
        }

        .sad {
            color: #2196f3;
        }

        

        .support {
            color: #9b59b6;
        }

        /* Reaction backgrounds for better visibility */
        .reaction-item.like {
            background: linear-gradient(135deg, #1877f2, #42a5f5);
        }

        .reaction-item.love {
            background: linear-gradient(135deg, #e91e63, #f06292);
        }

        .reaction-item.haha {
            background: linear-gradient(135deg, #f39c12, #ffb74d);
        }

        .reaction-item.angry {
            background: linear-gradient(135deg, #e74c3c, #ef5350);
        }

        .reaction-item.support {
            background: linear-gradient(135deg, #9b59b6, #ba68c8);
        }

        .reaction-item.sad {
            background: linear-gradient(135deg, #2196f3, #90caf9);
        }


        .reaction-item {
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        /* Action buttons */
        .action-button {
            background: none;
            border: none;
            color: #65676b;
            font-size: 14px;
            font-weight: 600;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .action-button:hover {
            background-color: #f2f3f5;
        }

        /* Selected reaction state */
        .reactions-button.active {
            color: #1877f2;
        }

        .selected-reaction {
            font-size: 16px;
        }

        /* Demo post styling */
        .demo-note {
            text-align: center;
            color: #65676b;
            font-size: 14px;
            margin-bottom: 20px;
            font-style: italic;
        }
    </style>

    <style>
    /* Feed Posts Styling */
    .feed-posts {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-top: 20px;
    }

    .post-card {
        background: var(--card-background, #ffffff);
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid var(--border-color, #e1e5e9);
        overflow: hidden;
        transition: box-shadow 0.3s ease;
    }

        .post-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    /* Post Header */
    .post-header {
        display: flex;
        align-items: flex-start;
        padding: 16px 20px 12px;
        gap: 12px;
    }

    .post-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
        flex-shrink: 0;
    }

    .post-author-info {
        flex: 1;
        min-width: 0;
    }

    .post-author-name {
        font-size: 15px;
        font-weight: 600;
        color: var(--text-primary, #1d2129);
        margin: 0 0 2px 0;
        line-height: 1.3;
    }

    .post-author-title {
        font-size: 13px;
        color: var(--text-secondary, #65676b);
        margin: 0 0 4px 0;
        line-height: 1.3;
    }

    .post-meta {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 12px;
        color: var(--text-tertiary, #8a8d91);
    }

    .post-visibility {
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .post-menu-btn {
        background: none;
        border: none;
        padding: 8px;
        border-radius: 6px;
        color: var(--text-secondary, #65676b);
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .post-menu-btn:hover {
            background-color: var(--hover-background, #f2f3f5);
        }

    /* Post Content */
    .post-content {
        padding: 0 20px 16px;
    }

    .post-text {
        font-size: 15px;
        line-height: 1.5;
        color: var(--text-primary, #1d2129);
        margin: 0 0 12px 0;
        white-space: pre-wrap;
    }

    .post-media {
        margin-top: 12px;
        border-radius: 8px;
        overflow: hidden;
    }

    .post-image {
        width: 100%;
        height: auto;
        display: block;
        max-height: 500px;
        object-fit: cover;
    }

    /* Post Footer */
    .post-footer {
        border-top: 1px solid var(--border-color, #e1e5e9);
    }

    .post-reactions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 13px;
        color: var(--text-secondary, #65676b);
    }

    .reaction-summary {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .reaction-icons {
        display: flex;
        gap: 2px;
    }

    .reaction-icon {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        border: 2px solid #ffffff;
        margin-left: -2px;
    }

        .reaction-icon:first-child {
            margin-left: 0;
        }

    .post-stats {
        display: flex;
        gap: 12px;
    }

    .post-actions {
        display: flex;
        border-top: 1px solid var(--border-color, #e1e5e9);
    }

    .action-btn {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 8px;
        background: none;
        border: none;
        font-size: 14px;
        font-weight: 500;
        color: var(--text-secondary, #65676b);
        cursor: pointer;
        transition: background-color 0.2s ease;
        border-radius: 0;
    }

        .action-btn:hover {
            background-color: var(--hover-background, #f2f3f5);
        }

        .action-btn i {
            font-size: 16px;
        }

    /* Dark theme support */
    [data-theme="dark"] .post-card {
        --card-background: #242526;
        --border-color: #3a3b3c;
        --text-primary: #e4e6ea;
        --text-secondary: #b0b3b8;
        --text-tertiary: #8a8d91;
        --hover-background: #3a3b3c;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .post-card

    {
        border-radius: 0;
        margin: 0 -16px;
        border-left: none;
        border-right: none;
    }

    .post-header {
        padding: 12px 16px 8px;
    }

    .post-content {
        padding: 0 16px 12px;
    }



    .action-btn {
        padding: 10px 4px;
        font-size: 13px;
    }

        .action-btn span {
            display: none;
        }

    }

    @@media (max-width: 480px) {
        .post-stats

    {
        flex-direction: column;
        gap: 4px;
        align-items: flex-end;
    }

    .reaction-count {
        font-size: 12px;
    }

    }
</style>


}

<div id="to-do-list">
    <form id="new-task-form" style="display: none">
        <textarea id="text-area"
                  placeholder="Enter a Task..."></textarea>
        <input type="button" id="add-new-task-button" value="Save" />
    </form>

    <form id="edit-task-form" style="display: none">
        <textarea id="edit-text-area"
                  placeholder="Edit Task..."></textarea>
        <input type="button" id="save-edit-button" value="Save" />
    </form>

    <nav id="nav" class="modal-backdrop">
        <h2>To Do List</h2>
        <form id="search-form">
            <input id="search-bar" type="search" placeholder="Search" />
        </form>
        <input type="button"
               id="input-button"
               value="+"
               title="New Task" />
        <div id="color">
            <input type="color" id="color-picker" />
            <input type="button" id="apply-color" value="Apply" />
        </div>
    </nav>
    <hr />
    <ol class="modal-backdrop" id="task-list"></ol>
</div>

<script>
    // State variables
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    let searchTerm = "";
    let color =
        JSON.parse(localStorage.getItem("color")) ||
        "rgba(9, 24, 241, 1)";
    let isNewTaskFormVisible = false;
    let isEditTaskFormVisible = false;
    let editingIndex = null;

    // DOM elements
    const newTaskForm = document.getElementById("new-task-form");
    const editTaskForm = document.getElementById("edit-task-form");
    const textArea = document.getElementById("text-area");
    const editTextArea = document.getElementById("edit-text-area");
    const addNewTaskButton = document.getElementById(
        "add-new-task-button"
    );
    const saveEditButton = document.getElementById("save-edit-button");
    const searchBar = document.getElementById("search-bar");
    const inputButton = document.getElementById("input-button");
    const colorPicker = document.getElementById("color-picker");
    const applyColorButton = document.getElementById("apply-color");
    const taskList = document.getElementById("task-list");

    // Initialize
    function init() {
        // Set initial color
        document.documentElement.style.setProperty(
            "--main-color",
            color
        );
        colorPicker.value = color;

        // Render tasks
        renderTasks();

        // Add event listeners
        addEventListeners();
    }

    function addEventListeners() {
        // New task form
        addNewTaskButton.addEventListener("click", () => {
            addTask();
            textArea.value = "";
        });

        // Edit task form
        saveEditButton.addEventListener("click", () => {
            editTask();
            editTextArea.value = "";
        });

        // Search
        searchBar.addEventListener("input", (e) => {
            searchTerm = e.target.value;
            renderTasks();
        });

        // New task button
        inputButton.addEventListener("click", newTaskTextArea);

        // Mouse events for input button
        inputButton.addEventListener("mouseenter", () => {
            inputButton.value = "-";
        });

        inputButton.addEventListener("mouseleave", () => {
            inputButton.value = "+";
        });

        // Color picker
        applyColorButton.addEventListener("click", changeColor);

        // Click outside to close forms
        document.addEventListener("mousedown", handleClickOutside);
    }

    function handleClickOutside(e) {
        if (isNewTaskFormVisible && !newTaskForm.contains(e.target)) {
            setNewTaskFormVisible(false);
        }
        if (isEditTaskFormVisible && !editTaskForm.contains(e.target)) {
            setEditTaskFormVisible(false);
        }
    }

    function setNewTaskFormVisible(visible) {
        isNewTaskFormVisible = visible;
        newTaskForm.style.display = visible ? "flex" : "none";

        const modalBackdrops =
            document.querySelectorAll(".modal-backdrop");
        modalBackdrops.forEach((el) => {
            el.style.opacity = visible ? "0.1" : "1";
        });
    }

    function setEditTaskFormVisible(visible) {
        isEditTaskFormVisible = visible;
        editTaskForm.style.display = visible ? "flex" : "none";

        const modalBackdrops =
            document.querySelectorAll(".modal-backdrop");
        modalBackdrops.forEach((el) => {
            el.style.opacity = visible ? "0.1" : "1";
        });
    }

    function addTask() {
        setNewTaskFormVisible(false);
        const taskText = textArea.value.trim();
        if (taskText !== "") {
            tasks.push(taskText);
            saveTasks();
            renderTasks();
        }
    }

    function deleteTask(index) {
        tasks = tasks.filter((_, i) => i !== index);
        saveTasks();
        renderTasks();
    }

    function moveTaskUp(index) {
        if (index !== 0) {
            const newTasks = [...tasks];
            [newTasks[index - 1], newTasks[index]] = [
                newTasks[index],
                newTasks[index - 1],
            ];
            tasks = newTasks;
            saveTasks();
            renderTasks();
        }
    }

    function moveTaskDown(index) {
        if (index < tasks.length - 1) {
            const newTasks = [...tasks];
            [newTasks[index], newTasks[index + 1]] = [
                newTasks[index + 1],
                newTasks[index],
            ];
            tasks = newTasks;
            saveTasks();
            renderTasks();
        }
    }

    function changeColor() {
        const newColor = colorPicker.value;
        color = newColor;
        document.documentElement.style.setProperty(
            "--main-color",
            newColor
        );

        try {
            localStorage.setItem("color", JSON.stringify(color));
        } catch (error) {
            console.error("Failed to save color:", error);
        }
    }

    function newTaskTextArea() {
        setNewTaskFormVisible(true);
    }

    function editTaskTextArea(task, index) {
        setEditTaskFormVisible(true);
        editingIndex = index;
        editTextArea.value = task;
    }

    function editTask() {
        if (editingIndex !== null && editTextArea.value.trim() !== "") {
            tasks[editingIndex] = editTextArea.value.trim();
            saveTasks();
            renderTasks();
        }
        setEditTaskFormVisible(false);
        editingIndex = null;
    }

    function saveTasks() {
        try {
            localStorage.setItem("tasks", JSON.stringify(tasks));
        } catch (error) {
            console.error("Failed to save tasks:", error);
        }
    }

    function renderTasks() {
        const filteredTasks = tasks.filter((task) =>
            task.toLowerCase().includes(searchTerm.toLowerCase())
        );

        taskList.innerHTML = "";

        filteredTasks.forEach((task, index) => {
            const originalIndex = tasks.indexOf(task);
            const li = document.createElement("li");
            li.className = "text";

            li.innerHTML = `
            <div id="to-move">
                <input type="button" class="move" id="move-up" value="◀">
                <input type="button" class="move" id="move-down" value="▶">
            </div>
            <input type="button" id="delete-button" value="Delete">
            <hr>
            <span class="task-text">${task}</span>
        `;

            // Add event listeners for this task
            const moveUpBtn = li.querySelector("#move-up");
            const moveDownBtn = li.querySelector("#move-down");
            const deleteBtn = li.querySelector("#delete-button");
            const taskText = li.querySelector(".task-text");

            moveUpBtn.addEventListener("click", () =>
                moveTaskUp(originalIndex)
            );
            moveDownBtn.addEventListener("click", () =>
                moveTaskDown(originalIndex)
            );
            deleteBtn.addEventListener("click", () =>
                deleteTask(originalIndex)
            );
            taskText.addEventListener("click", () =>
                editTaskTextArea(task, originalIndex)
            );

            taskList.appendChild(li);
        });
    }

    // Initialize the app
    init();
</script>

    @if (Model != null && Model.Any())
    {
        foreach (var post in Model)
        {
            <article class="post-card" role="article">
                <header class="post-header">
                    <img src="@(post.PostUserImg ?? "/api/placeholder/50/50")" alt="@post.PostUserName" class="post-avatar" />
                    <div class="post-author-info">
                        <h4 class="post-author-name">@post.PostUserName</h4>
                        <p class="post-author-title">@post.PostUserTitle</p>
                        <div class="post-meta">
                            <time>@(post.Since.TotalHours < 1 ? $"{post.Since.Minutes} min ago" : $"{(int)post.Since.TotalHours} hours ago")</time>
                            <span class="post-visibility">
                                <i class="fas fa-globe-americas"></i> Public
                            </span>
                        </div>
                    </div>
                    <button class="post-menu-btn" aria-label="Post options">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </header>

                <div class="post-content">
                    @if (!string.IsNullOrWhiteSpace(post.TextContent))
                    {
                        <p class="post-text">@post.TextContent</p>
                    }
                    @if (post.Images != null && post.Images.Any())
                    {
                        <div class="post-media">
                            @foreach (var img in post.Images)
                            {
                                <img src="@img" alt="Post image" class="post-image" />
                            }
                        </div>
                    }
                </div>

                <footer class="post-footer">
                    <div class="post-reactions">
                        <div class="reaction-summary">
                            <div class="reaction-icons">
                                <span class="reaction-icon like">👍</span>
                                <span class="reaction-icon love">❤️</span>
                                <span class="reaction-icon haha">😂</span>
                                <span class="reaction-icon angry">😡</span>
                                <span class="reaction-icon support">🤗</span>
                            </div>
                            <span class="reaction-count">@post.ReactionCount reactions</span>
                        </div>
                        <div class="post-stats">
                            <span class="comment-count">@((post.CommentsCount.ToString() ?? "0")) comments</span>
                            <span class="share-count">@post.NumberOfShares shares</span>
                        </div>
                    </div>
                    <div class="post-actions">
                        <div class="reactions-container">
                            <button class="reactions-button" type="button">
                                <span class="selected-reaction">👍</span>
                                <span class="reaction-text">Like</span>
                            </button>
                            <div class="reactions-popup">
                                <div class="reaction-item like" data-label="Like" data-reaction="like">👍</div>
                                <div class="reaction-item love" data-label="Love" data-reaction="love">❤️</div>
                                <div class="reaction-item haha" data-label="Haha" data-reaction="haha">😂</div>
                                <div class="reaction-item sad" data-label="Sad" data-reaction="sad">😢</div>
                                <div class="reaction-item angry" data-label="Angry" data-reaction="angry">😡</div>
                            </div>
                        </div>
                        <button class="action-btn" aria-label="Comment on post">
                            <i class="far fa-comment"></i>
                            <span>Comment</span>
                        </button>
                        <button class="action-btn" aria-label="Share post">
                            <i class="far fa-share"></i>
                            <span>Share</span>
                        </button>
                        <button class="action-btn" aria-label="Send post">
                            <i class="far fa-paper-plane"></i>
                            <span>Send</span>
                        </button>
                    </div>
                </footer>
            </article>
        }
    }
    else
    {
        <div class="demo-note">No posts to display.</div>
    }
</div>

<div class="reactions-popup">
    <div class="reaction-item like"
         data-label="Like"
         data-reaction="like">
        👍
    </div>
    <div class="reaction-item love"
         data-label="Love"
         data-reaction="love">
        ❤️
    </div>
    <div class="reaction-item haha"
         data-label="Haha"
         data-reaction="haha">
        😂
    </div>
    <div class="reaction-item angry"
         data-label="Angry"
         data-reaction="angry">
        😡
    </div>
    <div class="reaction-item sad"
         data-label="Sad"
         data-reaction="sad">
         😢
    </div>
</div>


@section Scripts{
    <script>
            // Reaction data
                    const reactions = {
            like: { emoji: "👍", text: "Like", color: "#1877f2" },
            love: { emoji: "❤️", text: "Love", color: "#e91e63" },
            haha: { emoji: "😂", text: "Haha", color: "#f39c12" },
            sad: { emoji: "😢", text: "Sad", color: "#2196f3" },
            angry: { emoji: "😡", text: "Angry", color: "#e74c3c" },
        };


            let currentReaction = "like";

            // Get elements
            const reactionsBtn = document.getElementById("reactionsBtn");
            const reactionItems = document.querySelectorAll(".reaction-item");
            const selectedReactionSpan =
                reactionsBtn.querySelector(".selected-reaction");
            const reactionTextSpan =
                reactionsBtn.querySelector(".reaction-text");

            // Add click handlers to reaction items
            reactionItems.forEach((item) => {
                item.addEventListener("click", (e) => {
                    e.stopPropagation();
                    const reaction = item.dataset.reaction;
                    selectReaction(reaction);
                });
            });

            function selectReaction(reactionKey) {
                currentReaction = reactionKey;
                const reaction = reactions[reactionKey];

                // Update button appearance
                selectedReactionSpan.textContent = reaction.emoji;
                reactionTextSpan.textContent = reaction.text;
                reactionsBtn.style.color = reaction.color;
                reactionsBtn.classList.add("active");

                // Add a small animation
                selectedReactionSpan.style.transform = "scale(1.2)";
                setTimeout(() => {
                    selectedReactionSpan.style.transform = "scale(1)";
                }, 150);
            }

            // Add some hover effects and sounds (visual feedback)
            reactionItems.forEach((item) => {
                item.addEventListener("mouseenter", () => {
                    // Add a subtle pulse effect
                    item.style.animation = "pulse 0.6s ease-in-out";
                });

                item.addEventListener("mouseleave", () => {
                    item.style.animation = "";
                });
            });

            // CSS animation for pulse effect
            const style = document.createElement("style");
            style.textContent = `
        @@keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.4); }
                100% { transform: scale(1.3); }
            }

            .selected-reaction {
                transition: transform 0.15s ease;
            }
        `;
            document.head.appendChild(style);
    </script>
};