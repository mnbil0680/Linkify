@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

@model List<PostMV>
@functions {
    string FormatSince(TimeSpan since)
    {
        if (since.TotalMinutes < 60)
            return $"{since.TotalMinutes:0} min ago";
        if (since.TotalHours < 24)
            return $"{since.TotalHours:0} hour{(since.TotalHours >= 2 ? "s" : "")} ago";
        if (since.TotalDays < 30)
            return $"{since.TotalDays:0} day{(since.TotalDays >= 2 ? "s" : "")} ago";
        return $"{(since.TotalDays / 30):0} month{(since.TotalDays / 30 >= 2 ? "s" : "")} ago";
    }

    bool HasUserReactedToComment(IEnumerable<CommentReactionMV> reactions, string userId, string reactionType)
    {
        return reactions != null && reactions.Any(r =>
            r.ReactorId == userId &&
            r.Reaction.ToString() == reactionType &&
            (r.IsDeleted == false || r.IsDeleted == null)
        );
    }

    bool HasUserReactedToPost(IEnumerable<PostReactionMV> reactions, string userId, string reactionType)
    {
        return reactions != null && reactions.Any(r =>
            r.ReactorId == userId &&
            r.Reaction.ToString() == reactionType &&
            (r.IsDeleted == false || r.IsDeleted == null)
        );
    }

    string GetUserReactionToPost(IEnumerable<PostReactionMV> reactions, string userId)
    {
        var userReaction = reactions?.FirstOrDefault(r =>
            r.ReactorId == userId &&
            (r.IsDeleted == false || r.IsDeleted == null)
        );
        return userReaction?.Reaction.ToString()?.ToLower() ?? "like";
    }

    List<string> GetTopReactions(PostMV post, int maxCount = 3)
    {
        var reactionCounts = new Dictionary<string, int>
        {
            { "like", post.LikeCount },
            { "love", post.LoveCount },
            { "haha", post.LaughCount },
            { "sad", post.SadCount },
            { "angry", post.AngryCount }
        };

        return reactionCounts
            .Where(r => r.Value > 0)
            .OrderByDescending(r => r.Value)
            .Take(maxCount)
            .Select(r => r.Key)
            .ToList();
    }

    (string emoji, string text, string color) GetReactionDisplay(string reactionType, bool isActive = false)
    {
        return reactionType?.ToLower() switch
        {
            "like" => ("👍", "Like", isActive ? "#1877f2" : "var(--text-secondary)"),
            "love" => ("❤️", "Love", isActive ? "#e91e63" : "var(--text-secondary)"),
            "haha" => ("😂", "Haha", isActive ? "#f39c12" : "var(--text-secondary)"),
            "sad" => ("😢", "Sad", isActive ? "#2196f3" : "var(--text-secondary)"),
            "angry" => ("😡", "Angry", isActive ? "#e74c3c" : "var(--text-secondary)"),
            _ => ("", "Like", "var(--text-secondary)")
        };
    }
}

@section Styles {
    <style>
        :root {
            --primary-blue: #1877f2;
            --primary-blue-hover: #166fe5;
            --success-green: #42a85f;
            --warning-orange: #fe9500;
            --danger-red: #fa383e;
            --background-primary: #f0f2f5;
            --background-secondary: #ffffff;
            --text-primary: #1c1e21;
            --text-secondary: #65676b;
            --text-tertiary: #8a8d91;
            --border-light: #e4e6ea;
            --border-medium: #dadde1;
            --hover-light: #f2f3f5;
            --shadow-light: 0 2px 4px rgba(0, 0, 0, 0.1);
            --shadow-medium: 0 4px 8px rgba(0, 0, 0, 0.12);
            --shadow-heavy: 0 8px 24px rgba(0, 0, 0, 0.15);
            --radius-small: 8px;
            --radius-medium: 12px;
            --radius-large: 16px;
            --transition-fast: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-medium: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        [data-theme="dark"] {
            --background-primary: #18191a;
            --background-secondary: #242526;
            --text-primary: #e4e6ea;
            --text-secondary: #b0b3b8;
            --text-tertiary: #8a8d91;
            --border-light: #3a3b3c;
            --border-medium: #4e4f50;
            --hover-light: #3a3b3c;
        }

        /* Enhanced Feed Container */
        .feed-container {
            max-width: 680px;
            margin: 0 auto;
            padding: 20px 16px;
        }

        /* Enhanced Post Card */
        .post-card {
            background: var(--background-secondary);
            border-radius: var(--radius-medium);
            box-shadow: var(--shadow-light);
            border: 1px solid var(--border-light);
            margin-bottom: 20px;
            overflow: hidden;
            transition: var(--transition-medium);
            position: relative;
        }

            .post-card:hover {
                box-shadow: var(--shadow-medium);
                transform: translateY(-1px);
            }

        /* Enhanced Post Header */
        .post-header {
            display: flex;
            align-items: flex-start;
            padding: 16px 20px 12px;
            gap: 12px;
        }

        .post-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            object-fit: cover;
            flex-shrink: 0;
            border: 2px solid var(--border-light);
            transition: var(--transition-fast);
        }

            .post-avatar:hover {
                transform: scale(1.05);
                border-color: var(--primary-blue);
            }

        .post-author-info {
            flex: 1;
            min-width: 0;
        }

        .post-author-name {
            font-size: 15px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0 0 2px 0;
            line-height: 1.3;
            cursor: pointer;
            transition: var(--transition-fast);
        }

            .post-author-name:hover {
                color: var(--primary-blue);
            }

        .post-author-title {
            font-size: 13px;
            color: var(--text-secondary);
            margin: 0 0 4px 0;
            line-height: 1.3;
        }

        .post-meta {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 12px;
            color: var(--text-tertiary);
        }

        .post-visibility {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        /* Enhanced Actions Menu */
        .post-actions-menu {
            display: flex;
            align-items: center;
            gap: 8px;
            position: relative;
        }

        .bookmark-btn, .post-menu-btn {
            background: none;
            border: none;
            padding: 10px;
            border-radius: var(--radius-small);
            color: var(--text-secondary);
            cursor: pointer;
            transition: var(--transition-fast);
            position: relative;
            overflow: hidden;
        }

            .bookmark-btn:hover, .post-menu-btn:hover {
                background-color: var(--hover-light);
                color: var(--text-primary);
                transform: scale(1.05);
            }

            .bookmark-btn.saved {
                color: var(--warning-orange);
                background-color: rgba(254, 149, 0, 0.1);
            }

                .bookmark-btn.saved:hover {
                    background-color: rgba(254, 149, 0, 0.2);
                }

        /* Enhanced Post Content */
        .post-content {
            padding: 0 20px 16px;
        }

        .post-text {
            font-size: 15px;
            line-height: 1.6;
            color: var(--text-primary);
            margin: 0 0 12px 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .post-media {
            margin-top: 12px;
            border-radius: var(--radius-small);
            overflow: hidden;
            position: relative;
        }

        .post-image {
            width: 100%;
            height: auto;
            display: block;
            max-height: 500px;
            object-fit: cover;
            transition: var(--transition-medium);
            margin-bottom: 4px;
        }

            .post-image:hover {
                transform: scale(1.02);
            }

            .post-image:last-child {
                margin-bottom: 0;
            }

        /* Enhanced Reactions System */
        .post-footer {
            border-top: 1px solid var(--border-light);
        }

        .post-reactions-summary {
            padding: 12px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 13px;
            color: var(--text-secondary);
        }

        .reaction-summary {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 4px 8px;
            border-radius: var(--radius-small);
            transition: var(--transition-fast);
        }

            .reaction-summary:hover {
                background-color: var(--hover-light);
            }

        .reaction-icons {
            display: flex;
            gap: -2px;
        }

        .reaction-icon {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            border: 2px solid var(--background-secondary);
            margin-left: -2px;
            transition: var(--transition-fast);
            cursor: pointer;
        }

            .reaction-icon:first-child {
                margin-left: 0;
            }

            .reaction-icon:hover {
                transform: scale(1.2);
                z-index: 2;
            }

        .post-stats {
            display: flex;
            gap: 12px;
        }

            .post-stats span {
                cursor: pointer;
                padding: 4px 8px;
                border-radius: var(--radius-small);
                transition: var(--transition-fast);
            }

                .post-stats span:hover {
                    background-color: var(--hover-light);
                    color: var(--primary-blue);
                }

        /* Enhanced Post Actions */
        .post-actions {
            display: flex;
            border-top: 1px solid var(--border-light);
            position: relative;
        }

        .reactions-container {
            flex: 1;
            position: relative;
        }

        .reactions-button {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 8px;
            background: none;
            border: none;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
            cursor: pointer;
            transition: var(--transition-fast);
            border-radius: 0;
            position: relative;
            overflow: hidden;
        }

            .reactions-button:hover {
                background-color: var(--hover-light);
            }

            .reactions-button.active {
                color: var(--primary-blue);
                font-weight: 600;
            }

        .selected-reaction {
            font-size: 16px;
            transition: var(--transition-fast);
        }

        .reactions-button:hover .selected-reaction {
            transform: scale(1.1);
        }

        /* Enhanced Reactions Popup */
        .reactions-popup {
            position: absolute;
            bottom: 100%;
            left: 118%;
            transform: translateX(-50%);
            background: var(--background-secondary);
            border-radius: 30px;
            box-shadow: var(--shadow-heavy);
            padding: 8px 16px;
            display: flex;
            gap: 8px;
            opacity: 0;
            visibility: hidden;
            transform: translateX(-50%) translateY(10px) scale(0.8);
            transition: var(--transition-medium);
            margin-bottom: 12px;
            white-space: nowrap;
            z-index: 1000;
            border: 1px solid var(--border-light);
        }

        .reactions-container:hover .reactions-popup {
            opacity: 1;
            visibility: visible;
            transform: translateX(-50%) translateY(0) scale(1);
        }

        .reaction-item {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-medium);
            font-size: 32px;
            position: relative;
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
        }

            .reaction-item:hover {
                transform: scale(1.3);
                z-index: 2;
            }

            .reaction-item.like {
                background: linear-gradient(135deg, #1877f2, #42a5f5);
            }

            .reaction-item.love {
                background: linear-gradient(135deg, #e91e63, #f06292);
            }

            .reaction-item.haha {
                background: linear-gradient(135deg, #f39c12, #ffb74d);
            }

            .reaction-item.angry {
                background: linear-gradient(135deg, #e74c3c, #ef5350);
            }

            .reaction-item.support {
                background: linear-gradient(135deg, #9b59b6, #ba68c8);
            }

            .reaction-item.sad {
                background: linear-gradient(135deg, #2196f3, #90caf9);
            }

            .reaction-item::after {
                content: attr(data-label);
                position: absolute;
                bottom: -40px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 6px 12px;
                border-radius: var(--radius-small);
                font-size: 12px;
                font-weight: 500;
                white-space: nowrap;
                opacity: 0;
                pointer-events: none;
                transition: var(--transition-fast);
            }

            .reaction-item:hover::after {
                opacity: 1;
            }

        /* Action Buttons */
        .action-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 8px;
            background: none;
            border: none;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
            cursor: pointer;
            transition: var(--transition-fast);
            position: relative;
            overflow: hidden;
        }

            .action-btn:hover {
                background-color: var(--hover-light);
                color: var(--text-primary);
            }

            .action-btn.active {
                color: var(--primary-blue);
                font-weight: 600;
            }

            .action-btn i {
                font-size: 16px;
                transition: var(--transition-fast);
            }

            .action-btn:hover i {
                transform: scale(1.1);
            }

        /* Comments Section */
        .comments-section {
            border-top: 1px solid var(--border-light);
            background: var(--background-primary);
        }

        .comments-container {
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
        }

        .comment-item {
            display: flex;
            gap: 12px;
            margin-bottom: 16px;
            animation: slideInComment 0.3s ease-out;
        }

        @@keyframes slideInComment {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
            flex-shrink: 0;
            border: 1px solid var(--border-light);
        }

        .comment-content {
            flex: 1;
            min-width: 0;
        }

        .comment-bubble {
            background: var(--background-secondary);
            border-radius: var(--radius-medium);
            padding: 12px 16px;
            margin-bottom: 8px;
            border: 1px solid var(--border-light);
            transition: var(--transition-fast);
            position: relative;
        }

            .comment-bubble:hover {
                box-shadow: var(--shadow-light);
            }

        .comment-author {
            font-size: 13px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
        }

        .comment-text {
            font-size: 14px;
            line-height: 1.4;
            color: var(--text-primary);
            word-wrap: break-word;
        }

        .comment-actions {
            display: flex;
            align-items: center;
            gap: 16px;
            font-size: 12px;
            color: var(--text-secondary);
            margin-left: 16px;
        }

        .comment-action {
            cursor: pointer;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: var(--radius-small);
            transition: var(--transition-fast);
        }

            .comment-action:hover {
                background-color: var(--hover-light);
                color: var(--text-primary);
            }

            .comment-action.active {
                color: var(--primary-blue);
            }

        /* Comment Input */
        .comment-input-container {
            padding: 16px 20px;
            border-top: 1px solid var(--border-light);
            background: var(--background-secondary);
        }

        .comment-input-wrapper {
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        .comment-input-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid var(--border-light);
        }

        .comment-input {
            flex: 1;
            background: var(--background-primary);
            border: 1px solid var(--border-light);
            border-radius: 20px;
            padding: 8px 16px;
            font-size: 14px;
            resize: none;
            min-height: 36px;
            max-height: 100px;
            transition: var(--transition-fast);
        }

            .comment-input:focus {
                outline: none;
                border-color: var(--primary-blue);
                box-shadow: 0 0 0 2px rgba(24, 119, 242, 0.1);
            }

        .comment-submit-btn {
            background: var(--primary-blue);
            color: white;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-fast);
        }

            .comment-submit-btn:hover {
                background: var(--primary-blue-hover);
                transform: scale(1.05);
            }

            .comment-submit-btn:disabled {
                background: var(--text-tertiary);
                cursor: not-allowed;
                transform: none;
            }

        /* Loading States */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid var(--border-light);
            border-radius: 50%;
            border-top-color: var(--primary-blue);
            animation: spin 1s ease-in-out infinite;
        }

        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }


        /* Toast Notifications */
        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1050;
        }

        .toast-notification {
            background: var(--background-secondary);
            border: 1px solid var(--border-light);
            border-radius: var(--radius-small);
            padding: 12px 16px;
            margin-bottom: 8px;
            box-shadow: var(--shadow-medium);
            display: flex;
            align-items: center;
            gap: 12px;
            opacity: 0;
            transform: translateX(100%);
            transition: var(--transition-medium);
            max-width: 300px;
        }

            .toast-notification.show {
                opacity: 1;
                transform: translateX(0);
            }

            .toast-notification.success {
                border-left: 4px solid var(--success-green);
            }

            .toast-notification.error {
                border-left: 4px solid var(--danger-red);
            }

            .toast-notification.info {
                border-left: 4px solid var(--primary-blue);
            }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .feed-container {
                padding: 16px 8px;
            }

            .post-card {
                border-radius: 0;
                margin-left: -8px;
                margin-right: -8px;
                border-left: none;
                border-right: none;
            }

            .post-header, .post-content {
                padding-left: 16px;
                padding-right: 16px;
            }

            .post-reactions-summary, .comment-input-container {
                padding-left: 16px;
                padding-right: 16px;
            }

            .action-btn span {
                display: none;
            }
        }

        /* Animations */
        @@keyframes reactionPop {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.3);
            }
            100% {
                transform: scale(1);
            }
        }

        @@keyframes bookmarkSave {
            0% {
                transform: scale(1) rotate(0deg);
            }
            50% {
                transform: scale(1.2) rotate(10deg);
            }
            100% {
                transform: scale(1) rotate(0deg);
            }
        }

        .reaction-animate {
            animation: reactionPop 0.3s ease-out;
        }

        .bookmark-animate {
            animation: bookmarkSave 0.4s ease-out;
        }

        .no-posts-message {
            text-align: center; 
            padding: 40px; 
            color: var(--text-secondary);
        }

        .no-posts-message i {
            font-size: 48px; 
            margin-bottom: 16px; 
            opacity: 0.5;
        }

        .no-posts-message h3 {
            color: var(--text-primary);
            margin-bottom: 8px;
        }
    </style>

    <style>
        /* Enhanced Comment Actions */
        .comment-actions {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 12px;
            color: var(--text-secondary);
            margin-left: 16px;
            flex-wrap: wrap;
        }

        .comment-reactions-container {
            display: flex;
            align-items: center;
            gap: 6px;
            position: relative;
        }

        .comment-reaction-button-wrapper {
            position: relative;
        }

        .comment-reaction-btn {
            display: flex;
            align-items: center;
            gap: 4px;
            background: none;
            border: none;
            padding: 4px 8px;
            border-radius: var(--radius-small);
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            color: var(--text-secondary);
            transition: var(--transition-fast);
        }

            .comment-reaction-btn:hover {
                background-color: var(--hover-light);
            }

            .comment-reaction-btn.active {
                font-weight: 700;
            }

        .comment-reaction-emoji {
            font-size: 14px;
            transition: var(--transition-fast);
        }

        .comment-reaction-btn:hover .comment-reaction-emoji {
            transform: scale(1.1);
        }

        .comment-reaction-count {
            background: var(--hover-light);
            color: var(--text-primary);
            font-size: 11px;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 10px;
            cursor: pointer;
            transition: var(--transition-fast);
        }

            .comment-reaction-count:hover {
                background: var(--border-light);
                transform: scale(1.05);
            }

        /* Comment Reactions Popup */
        .comment-reactions-popup {
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: var(--background-secondary);
            border-radius: 20px;
            box-shadow: var(--shadow-heavy);
            padding: 6px 12px;
            display: flex;
            gap: 6px;
            opacity: 0;
            visibility: hidden;
            transform: translateX(-50%) translateY(8px) scale(0.8);
            transition: var(--transition-medium);
            margin-bottom: 8px;
            z-index: 1001;
            border: 1px solid var(--border-light);
        }

        .comment-reaction-button-wrapper:hover .comment-reactions-popup {
            opacity: 1;
            visibility: visible;
            transform: translateX(-50%) translateY(0) scale(1);
        }

        .comment-reaction-item {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-medium);
            font-size: 18px;
            position: relative;
        }

            .comment-reaction-item:hover {
                transform: scale(1.2);
                z-index: 2;
            }

            .comment-reaction-item.like {
                background: linear-gradient(135deg, #1877f2, #42a5f5);
            }

            .comment-reaction-item.love {
                background: linear-gradient(135deg, #e91e63, #f06292);
            }

            .comment-reaction-item.haha {
                background: linear-gradient(135deg, #f39c12, #ffb74d);
            }

            .comment-reaction-item.angry {
                background: linear-gradient(135deg, #e74c3c, #ef5350);
            }

        /* Enhanced Reply Actions */
        .comment-reply-container {
            position: relative;
        }

        .reply-btn {
            display: flex;
            align-items: center;
            gap: 2px;
        }

        .reply-input-section {
            margin-top: 12px;
            padding-left: 44px;
            animation: slideInReply 0.3s ease-out;
        }

        @@keyframes slideInReply {
            from

        {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .reply-input-wrapper {
            display: flex;
            gap: 8px;
            align-items: flex-end;
        }

        .reply-input-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid var(--border-light);
        }

        .reply-input {
            flex: 1;
            background: var(--background-primary);
            border: 1px solid var(--border-light);
            border-radius: 16px;
            padding: 6px 12px;
            font-size: 13px;
            resize: none;
            min-height: 32px;
            max-height: 80px;
            transition: var(--transition-fast);
        }

            .reply-input:focus {
                outline: none;
                border-color: var(--primary-blue);
                box-shadow: 0 0 0 1px rgba(24, 119, 242, 0.1);
            }

        .reply-submit-btn {
            background: var(--primary-blue);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition-fast);
            font-size: 10px;
        }

            .reply-submit-btn:hover:not(:disabled) {
                background: var(--primary-blue-hover);
                transform: scale(1.05);
            }

            .reply-submit-btn:disabled {
                background: var(--text-tertiary);
                cursor: not-allowed;
            }

        /* Owner Actions */
        .comment-owner-actions .dropdown-toggle {
            background: none;
            border: none;
            color: var(--text-secondary);
            padding: 4px 6px;
        }

            .comment-owner-actions .dropdown-toggle:hover {
                background: var(--hover-light);
                color: var(--text-primary);
            }

        /* Report Button */
        .report-btn {
            color: var(--text-tertiary);
            font-size: 11px;
        }

            .report-btn:hover {
                color: var(--danger-red);
            }

        /* Enhanced Time Display */
        .comment-time {
            font-size: 11px;
            color: var(--text-tertiary);
            cursor: help;
        }

            .comment-time:hover {
                color: var(--text-secondary);
            }

        /* Responsive Design for Comments */
        @@media (max-width: 768px) {
            .comment-actions

        {
            gap: 8px;
            font-size: 11px;
        }

        .comment-reaction-btn {
            padding: 2px 6px;
        }

        .reply-input-section {
            padding-left: 32px;
        }

        }
    </style>

}

<div class="feed-container">
    @if (Model != null && Model.Any())
    {
        foreach (var post in Model)
        {
            <form id="deletePostForm-@post.postId" method="post" action="/Post/DeletePost" style="display:none;">
                <input type="hidden" name="id" value="@post.postId" />
            </form>

            var userReaction = GetUserReactionToPost(post.Reactions, currentUserId);
            var hasUserReacted = HasUserReactedToPost(post.Reactions, currentUserId, userReaction);
            var topReactions = GetTopReactions(post);
            


            <article class="post-card" data-post-id="@post.postId" role="article">
                <!-- Post Header -->
                <header class="post-header">
                    <img src="@(post.PostUserImg ?? "/images/default-avatar.png")"
                    alt="@post.PostUserName"
                    class="post-avatar"
                    loading="lazy" />
                    <div class="post-author-info">
                        <h4 class="post-author-name">@post.PostUserName</h4>
                        @if (!string.IsNullOrWhiteSpace(post.PostUserTitle))
                        {
                            <p class="post-author-title">@post.PostUserTitle</p>
                        }
                        <div class="post-meta">
                            <time datetime="@DateTime.Now.Subtract(post.Since).ToString("yyyy-MM-ddTHH:mm:ss")">
                                @FormatSince(post.Since)
                            </time>
                            <span class="post-visibility">
                                <i class="fas fa-globe-americas" aria-hidden="true"></i>
                                <span class="sr-only">Public post</span>
                                Public
                            </span>
                        </div>
                    </div>

                    <div class="post-actions-menu">

                        <button 
                            class="bookmark-btn @(post.IsSavedByCurrentUser ? "saved" : "")"
                            data-post-id="@post.postId"
                            data-saved="@post.IsSavedByCurrentUser.ToString().ToLower()"
                            onclick="toggleBookmark(this, @post.postId)"
                            title="@(post.IsSavedByCurrentUser ? "Remove from saved posts" : "Save post")"
                            aria-label="@(post.IsSavedByCurrentUser ? "Remove from saved posts" : "Save post")">
                            <i class="@(post.IsSavedByCurrentUser ? "fa-solid fa-bookmark" : "fa-regular fa-bookmark")" aria-hidden="true" id="save-icon-@post.postId"></i>
                        </button>
                        
                       
                            

                                @if (currentUserId == post.PostUserId) // Owner options
                                {
                            <div class="dropdown">
                                <button class="post-menu-btn" aria-label="Post options" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-h" aria-hidden="true"></i>
                                </button>

                                <div class="dropdown-menu dropdown-menu-end">

                                    <a class="dropdown-item"
                                       asp-controller="Post"
                                       asp-action="EditPost"
                                       asp-route-id="@post.postId"
                                       onclick="editPost(@post.postId)">
                                        <i class="fas fa-edit me-2"></i>Edit
                                    </a>

                                    <a class="dropdown-item text-danger" href="javascript:void(0);" onclick="confirmDeletePost(@post.postId)">
                                        <i class="fas fa-trash me-2"></i>Delete
                                    </a>
                                    </div>

                                    </div>
                                }
                                else // Other user options
                                {
                                    
                                }
                            

                        
                    </div>
                </header>

                <!-- Post Content -->
                <div class="post-content">
                    @if (!string.IsNullOrWhiteSpace(post.TextContent))
                    {
                        <p class="post-text">@post.TextContent</p>
                    }
                    @if (post.Images != null && post.Images.Any())
                    {
                        <div class="post-media">
                            @foreach (var img in post.Images)
                            {
                                <img src="@img" alt="Post image" class="post-image" loading="lazy" />
                            }
                        </div>
                    }
                </div>

                <!-- Post Footer -->
                <footer class="post-footer">
                    <!-- Reaction Summary -->

                    <div class="post-reactions-summary">
                        @if (post.ReactionCount > 0)
                        {
                            <div class="reaction-summary" onclick="showReactionDetails(@post.postId)">
                                <div class="reaction-icons">
                                    @foreach (var reaction in topReactions)
                                    {
                                        switch (reaction)
                                        {
                                            case "like":
                                                <span class="reaction-icon like" title="Like">👍</span>
                                                break;
                                            case "love":
                                                <span class="reaction-icon love" title="Love">❤️</span>
                                                break;
                                            case "haha":
                                                <span class="reaction-icon haha" title="Haha">😂</span>
                                                break;
                                            case "sad":
                                                <span class="reaction-icon sad" title="Sad">😢</span>
                                                break;
                                            case "angry":
                                                <span class="reaction-icon angry" title="Angry">😡</span>
                                                break;
                                        }
                                    }
                                </div>
                                <span class="reaction-count">
                                    @if (post.ReactionCount == 1)
                                    {
                                        @:1 person reacted
                                    }
                                    else
                                    {
                                        @post.ReactionCount.ToString("N0") <text>reactions</text>
                                    }
                                </span>
                            </div>
                        }
                        else
                        {
                            <div class="reaction-summary" style="color: var(--text-tertiary); font-size: 13px;">
                                No reactions yet
                            </div>
                        }

                        <div class="post-stats">
                            @if (post.CommentsCount > 0)
                            {
                                <span class="comment-count" onclick="toggleComments(@post.postId)">
                                    @post.CommentsCount.ToString("N0") comment@(post.CommentsCount == 1 ? "" : "s")
                                </span>
                            }
                            else
                            {
                                <span class="no-comments" style="color: var(--text-tertiary); font-size: 13px;">
                                    No comments yet
                                </span>
                            }
                            @if (post.NumberOfShares > 0)
                            {
                                <span class="share-count">
                                    @post.NumberOfShares.ToString("N0") share@(post.NumberOfShares == 1 ? "" : "s")
                                </span>
                            }
                            else
                            {
                                <span class="no-shares" style="color: var(--text-tertiary); font-size: 13px;">
                                    Not shared yet
                                </span>
                            }
                        </div>

                    </div>


                    <!-- Post Actions -->
                    <div class="post-actions">
                        <div class="reactions-container">
                            @{
                                var reactionEmoji = "";
                                var reactionText = "Like";
                                var reactionColor = "var(--text-secondary)";

                                if (hasUserReacted)
                                {
                                    switch (userReaction.ToLower())
                                    {
                                        case "like":
                                            reactionEmoji = "👍";
                                            reactionText = "Like";
                                            reactionColor = "#1877f2";
                                            break;
                                        case "love":
                                            reactionEmoji = "❤️";
                                            reactionText = "Love";
                                            reactionColor = "#e91e63";
                                            break;
                                        case "haha":
                                            reactionEmoji = "😂";
                                            reactionText = "Haha";
                                            reactionColor = "#f39c12";
                                            break;
                                        case "sad":
                                            reactionEmoji = "😢";
                                            reactionText = "Sad";
                                            reactionColor = "#2196f3";
                                            break;
                                        case "angry":
                                            reactionEmoji = "😡";
                                            reactionText = "Angry";
                                            reactionColor = "#e74c3c";
                                            break;
                                    }
                                }
                                var (reactionEmoji2, reactionText2, reactionColor2) = GetReactionDisplay(userReaction, hasUserReacted);
                            }

                            @Html.AntiForgeryToken()
                            <!-- Add this line -->
                            <input type="hidden" id="currentUserId" value="@currentUserId" /> 
                           
                            <!-- Single reaction button -->
                            <button class="reactions-button @(hasUserReacted ? "active" : "")"
                                    type="button"
                                    data-post-id="@post.postId"
                                    data-current-reaction="@userReaction"
                                    style="color: @reactionColor2;"
                                    onclick="handleReactionButtonClick(@post.postId)">
                                <span class="selected-reaction">@reactionEmoji2</span>
                                <span class="reaction-text">@reactionText2</span>
                            </button>

                            <div class="reactions-popup">
                                <div class="reaction-item like" data-label="Like" data-reaction="like" onclick="selectReaction(@post.postId, 'like')">👍</div>
                                <div class="reaction-item love" data-label="Love" data-reaction="love" onclick="selectReaction(@post.postId, 'love')">❤️</div>
                                <div class="reaction-item haha" data-label="Haha" data-reaction="haha" onclick="selectReaction(@post.postId, 'haha')">😂</div>
                                <div class="reaction-item sad" data-label="Sad" data-reaction="sad" onclick="selectReaction(@post.postId, 'sad')">😢</div>
                                <div class="reaction-item angry" data-label="Angry" data-reaction="angry" onclick="selectReaction(@post.postId, 'angry')">😡</div>
                            </div>
                        </div>

                        <button class="action-btn" onclick="toggleComments(@post.postId)" aria-label="Comment on post">
                            <i class="far fa-comment" aria-hidden="true"></i>
                            <span>Comment</span>
                        </button>

                        <button class="action-btn" onclick="sharePost(@post.postId)" aria-label="Send post">
                            <i class="far fa-paper-plane" aria-hidden="true"></i>
                            <span>Share</span>
                        </button>
                    </div>

                    <!-- Comments Section -->
                    <div class="comments-section" id="comments-@post.postId" style="display: none;">
                        <div class="comments-container">
                            @if (post.Comments != null && post.Comments.Any())
                            {
                                @foreach (var comment in post.Comments.Take(3)) // Show only first 3 comments initially
                                {
                                    <div class="comment-item" data-comment-id="@comment.CommentID">
                                        <img src="@(comment.AuthorAvatar ?? "/imgs/Account/default.png")" alt="@comment.AuthorName" class="comment-avatar" loading="lazy" />
                                        <div class="comment-content">
                                            <div class="comment-bubble">
                                                <div class="comment-author">@comment.AuthorName</div>
                                                <div class="comment-text">
                                                    @comment.TextContent
                                                    @if (comment.IsEdited)
                                                    {
                                                        <small class="text-muted ms-1">(edited)</small>
                                                    }
                                                </div>

                                            </div>
                                            
                                            <div class="comment-actions">
                                                @{
                                                    var hasCommentReaction = HasUserReactedToComment(comment.Reactions, currentUserId, "like");
                                                    var userCommentReaction = comment.Reactions?.FirstOrDefault(r =>
                                                    r.ReactorId == currentUserId &&
                                                    (r.IsDeleted == false || r.IsDeleted == null));
                                                    var commentReactionType = userCommentReaction?.Reaction?.ToString()?.ToLower() ?? "like";
                                                    var hasAnyCommentReaction = userCommentReaction != null;

                                                    // Get reaction counts for this comment
                                                    var commentLikeCount = comment.Reactions?.Count(r => r.Reaction == "Like" && !r.IsDeleted) ?? 0;
                                                    var commentLoveCount = comment.Reactions?.Count(r => r.Reaction == "Love" && !r.IsDeleted) ?? 0;
                                                    var commentHahaCount = comment.Reactions?.Count(r => r.Reaction == "Haha" && !r.IsDeleted) ?? 0;
                                                    var commentAngryCount = comment.Reactions?.Count(r => r.Reaction == "Angry" && !r.IsDeleted) ?? 0;
                                                    var totalCommentReactions = commentLikeCount + commentLoveCount + commentHahaCount + commentAngryCount;
                                                }

                                                <!-- Enhanced Comment Reactions -->
                                                <div class="comment-reaction-button-wrapper">
                                                    <button class="comment-reaction-btn @(hasAnyCommentReaction ? "active" : "")"
                                                            type="button"
                                                            data-comment-id="@comment.CommentID"
                                                            data-current-reaction="@commentReactionType"
                                                            style="@(hasAnyCommentReaction ? GetCommentReactionColor(commentReactionType) : "")">
                                                        <span class="comment-reaction-emoji">@GetCommentReactionEmoji(commentReactionType, hasAnyCommentReaction)</span>
                                                        <span class="comment-reaction-text">@GetCommentReactionText(commentReactionType, hasAnyCommentReaction)</span>
                                                    </button>
                                                    <div class="comment-reactions-popup">
                                                        <div class="comment-reaction-item like" data-label="Like" data-reaction="like" onclick="selectCommentReaction(@comment.CommentID, 'like')">👍</div>
                                                        <div class="comment-reaction-item love" data-label="Love" data-reaction="love" onclick="selectCommentReaction(@comment.CommentID, 'love')">❤️</div>
                                                        <div class="comment-reaction-item haha" data-label="Haha" data-reaction="haha" onclick="selectCommentReaction(@comment.CommentID, 'haha')">😂</div>
                                                        <div class="comment-reaction-item sad" data-label="Sad" data-reaction="sad" onclick="selectCommentReaction(@comment.CommentID, 'sad')">😢</div>
                                                        <div class="comment-reaction-item angry" data-label="Angry" data-reaction="angry" onclick="selectCommentReaction(@comment.CommentID, 'angry')">😡</div>
                                                    </div>
                                                </div>

                                                <!-- Enhanced Reply Action -->
                                                <div class="comment-reply-container">
                                                    <button class="comment-action reply-btn"
                                                            onclick="toggleReplyInput(@comment.CommentID)"
                                                            data-comment-id="@comment.CommentID">
                                                        <i class="fas fa-reply me-1"></i>
                                                        <span>Reply</span>
                                                    </button>
                                                </div>

                                                <!-- Enhanced Edit/Delete Actions (if user owns comment) -->
                                                @if (currentUserId == comment.CommenterId)
                                                {
                                                    <div class="comment-owner-actions">
                                                        <div class="dropdown">
                                                            <button class="comment-action dropdown-toggle"
                                                                    type="button"
                                                                    id="commentMenu@(comment.CommentID)"
                                                                    data-bs-toggle="dropdown"
                                                                    aria-expanded="false">
                                                                <i class="fas fa-ellipsis-h"></i>
                                                            </button>
                                                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="commentMenu@(comment.CommentID)">
                                                                <li>
                                                                    <button class="dropdown-item" onclick="editComment(@comment.CommentID)">
                                                                        <i class="fas fa-edit me-2"></i>Edit
                                                                    </button>
                                                                </li>
                                                                <li>
                                                                    <button class="dropdown-item text-danger" onclick="deleteComment(@comment.CommentID)">
                                                                        <i class="fas fa-trash me-2"></i>Delete
                                                                    </button>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                
                                                }

                                                <!-- Time Display with Enhanced Formatting -->
                                                <time datetime="@DateTime.Now.Subtract(comment.Since).ToString("yyyy-MM-ddTHH:mm:ss")">
                                                    @FormatSince(comment.Since)
                                                </time>

                                                <!-- Report Action -->
                                                @if (currentUserId != comment.CommenterId)
                                                {
                                                    <button class="comment-action report-btn" onclick="reportComment(@comment.CommentID)">
                                                        <i class="fas fa-flag me-1"></i>
                                                        <span class="d-none d-md-inline">Report</span>
                                                    </button>
                                                }
                                            </div>

                                            @* // Show Relpies *@
                                            @if (comment.Replies != null && comment.Replies.Any())
                                            {
                                                <div class="replies-container" style="margin-left:44px;">
                                                    @foreach (var reply in comment.Replies)
                                                    {
                                                        <div class="comment-item reply-item" data-comment-id="@reply.CommentID">
                                                            <img src="@(reply.AuthorAvatar ?? "/imgs/Account/default.png")" alt="@reply.AuthorName" class="comment-avatar" loading="lazy" />
                                                            <div class="comment-content">
                                                                <div class="comment-bubble">
                                                                    <div class="comment-author">@reply.AuthorName</div>
                                                                    <div class="comment-text">
                                                                        @reply.TextContent
                                                                        @if (reply.IsEdited)
                                                                        {
                                                                            <small class="text-muted ms-1">(edited)</small>
                                                                        }
                                                                    </div>
                                                                </div>
                                                                <div class="comment-actions">
                                                                    <time datetime="@DateTime.Now.Subtract(reply.Since).ToString("yyyy-MM-ddTHH:mm:ss")">
                                                                        @FormatSince(reply.Since)
                                                                    </time>
                                                                    <!-- reply actions-->
                                                                    @if (currentUserId == reply.CommenterId)
                                                                    {
                                                                        <div class="comment-owner-actions">
                                                                            <div class="dropdown">
                                                                                <button class="comment-action dropdown-toggle"
                                                                                        type="button"
                                                                                        id="replyMenu@(reply.CommentID)"
                                                                                        data-bs-toggle="dropdown"
                                                                                        aria-expanded="false">
                                                                                    <i class="fas fa-ellipsis-h"></i>
                                                                                </button>
                                                                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="replyMenu@(reply.CommentID)">
                                                                                    <li>
                                                                                        <button class="dropdown-item" onclick="editReply(@reply.CommentID)">
                                                                                            <i class="fas fa-edit me-2"></i>Edit
                                                                                        </button>
                                                                                    </li>
                                                                                    <li>
                                                                                        <button class="dropdown-item text-danger" onclick="deleteReply(@reply.CommentID)">
                                                                                            <i class="fas fa-trash me-2"></i>Delete
                                                                                        </button>
                                                                                    </li>
                                                                                </ul>
                                                                            </div>
                                                                        </div>
                                                                    }

                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }


                                            <!-- Reply Input Section (Initially Hidden) -->
                                            <div class="reply-input-section" id="reply-@comment.CommentID" style="display: none;">
                                                <div class="reply-input-wrapper">
                                                    <img src="@(ViewBag.CurrentUserAvatar ?? "/imgs/Account/default.png")"
                                                         alt="Your avatar"
                                                         class="reply-input-avatar" />
                                                    <textarea class="reply-input"
                                                              placeholder="Write a reply..."
                                                              rows="1"
                                                              data-comment-id="@comment.CommentID"
                                                              onkeypress="handleReplySubmit(event, @comment.CommentID)"
                                                              oninput="autoResizeTextarea(this)"></textarea>
                                                    <button class="reply-submit-btn"
                                                            onclick="submitReply(@comment.CommentID)"
                                                            disabled>
                                                        <i class="fas fa-paper-plane"></i>
                                                    </button>
                                                </div>
                                            </div>

                                            @functions {
                                string GetCommentReactionEmoji(string reactionType, bool isActive)
                                {
                                    if (!isActive) return "👍";

                                    return reactionType?.ToLower() switch
                                    {
                                        "love" => "❤️",
                                        "haha" => "😂",
                                        "angry" => "😡",
                                        _ => "👍"
                                    };
                                }

                                string GetCommentReactionText(string reactionType, bool isActive)
                                {
                                    if (!isActive) return "Like";

                                    return reactionType?.ToLower() switch
                                    {
                                        "love" => "Love",
                                        "haha" => "Haha",
                                        "angry" => "Angry",
                                        _ => "Like"
                                    };
                                }

                                string GetCommentReactionColor(string reactionType)
                                {
                                    return reactionType?.ToLower() switch
                                    {
                                        "love" => "color: #e91e63;",
                                        "haha" => "color: #f39c12;",
                                        "angry" => "color: #e74c3c;",
                                        _ => "color: #1877f2;"
                                    };
                                }
                            }

                                        </div>
                                    </div>
                                }
                                
                                @if (post.Comments.Count > 3)
                                {
                                    <div class="load-more-comments" onclick="loadMoreComments(@post.postId)">
                                        <span style="color: var(--text-secondary); cursor: pointer; font-size: 14px; padding: 8px;">
                                            View @((post.Comments.Count - 3).ToString()) more comment@(post.Comments.Count - 3 == 1 ? "" : "s")
                                        </span>
                                    </div>
                                }
                            }
                            else
                            {
                                <div style="text-align: center; padding: 20px; color: var(--text-secondary); font-size: 14px;">
                                    No comments yet. Be the first to comment!
                                </div>
                            }
                        </div>

                        <!-- Comment Input -->
                        <div class="comment-input-container">
                            <div class="comment-input-wrapper">
                                <img src="@(currentUserId != null ? "/imgs/Account/default.png" : "/imgs/Account/default.png")" alt="Your avatar" class="comment-input-avatar" loading="lazy" />
                                <textarea class="comment-input" placeholder="Write a comment..." rows="1"
                                          data-post-id="@post.postId"
                                          onkeypress="handleCommentSubmit(event, @post.postId)"
                                          oninput="autoResizeTextarea(this)"></textarea>
                                <button class="comment-submit-btn" onclick="submitComment(@post.postId)" disabled>
                                    <i class="fas fa-paper-plane" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </footer>
            </article>
        }
    }
    else
    {
        <div class="no-posts-message">
            <i class="fas fa-comments"></i>
            <h3>No posts to display</h3>
            <p>Be the first to share something with your community!</p>
        </div>
    }
</div>



@section Scripts {
    <script>
        // Enhanced Reactions System
        const reactions = {
            like: { emoji: "👍", text: "Like", color: "#1877f2" },
            love: { emoji: "❤️", text: "Love", color: "#e91e63" },
            haha: { emoji: "😂", text: "Haha", color: "#f39c12" },
            sad: { emoji: "😢", text: "Sad", color: "#2196f3" },
            angry: { emoji: "😡", text: "Angry", color: "#e74c3c" }
        };

        let userReactions = {}; // Store user reactions per post
        let commentReactions = {}; // Store comment reactions

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeReactions();
            initializeCommentInputs();
            initializeDropdowns();
            loadInitialReactions();
        });

        function initializeReactions() {
            document.querySelectorAll('.reactions-button').forEach(button => {
                const postId = button.dataset.postId;
                const currentReaction = button.dataset.currentReaction || 'like';
                userReactions[postId] = currentReaction;
            });
        }

        function loadInitialReactions() {
            // Load user's existing reactions from the model data
            document.querySelectorAll('.reactions-button[data-current-reaction]').forEach(button => {
                const postId = button.dataset.postId;
                const currentReaction = button.dataset.currentReaction;
                if (currentReaction && currentReaction !== 'like') {
                    userReactions[postId] = currentReaction;
                }
            });
        }

        function initializeCommentInputs() {
            document.querySelectorAll('.comment-input').forEach(input => {
                input.addEventListener('input', function() {
                    const submitBtn = this.parentElement.querySelector('.comment-submit-btn');
                    submitBtn.disabled = this.value.trim() === '';
                    autoResizeTextarea(this);
                });
            });
        }

        function initializeDropdowns() {
            if (typeof bootstrap !== 'undefined') {
                document.querySelectorAll('[data-bs-toggle="dropdown"]').forEach(dropdown => {
                    new bootstrap.Dropdown(dropdown);
                });
            }
        }




        // Post Reactions
        function selectReaction(postId, reactionKey) {
            const reaction = reactions[reactionKey];
            const button = document.querySelector(`[data-post-id="${postId}"].reactions-button`);
            const selectedReactionSpan = button.querySelector('.selected-reaction');
            const reactionTextSpan = button.querySelector('.reaction-text');

            // Check if user already has this reaction
            const currentReaction = userReactions[postId];
            const isCurrentReaction = currentReaction === reactionKey;

            if (isCurrentReaction) {
                // Remove reaction
                selectedReactionSpan.textContent = reactions.like.emoji;
                reactionTextSpan.textContent = reactions.like.text;
                button.style.color = 'var(--text-secondary)';
                button.classList.remove('active');
                userReactions[postId] = null;
                submitReaction(postId, null); // Remove reaction
                showToast(`Removed ${reaction.text} reaction`, 'info');
            } else {
                // Add/change reaction
                selectedReactionSpan.textContent = reaction.emoji;
                reactionTextSpan.textContent = reaction.text;
                button.style.color = reaction.color;
                button.classList.add('active');

                // Add animation
                selectedReactionSpan.classList.add('reaction-animate');
                setTimeout(() => selectedReactionSpan.classList.remove('reaction-animate'), 300);

                // Store user reaction
                userReactions[postId] = reactionKey;

                // Send to server
                submitReaction(postId, reactionKey);
                showToast(`You reacted with ${reaction.text}`, 'success');
            }
        }
                // Enhanced AJAX call function with comprehensive error handling
        function ajaxCall({ url, method = 'POST', data = null, headers = {}, onSuccess, onError }) {
            const options = {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken(),
                    'X-Requested-With': 'XMLHttpRequest',
                    ...headers
                }
            };

            if (data) options.body = JSON.stringify(data);

            fetch(url, options)
                .then(response => {
                    // Check if response is ok
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    // Check content type
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json();
                    } else {
                        throw new Error('Invalid response format - expected JSON');
                    }
                })
                .then(result => {
                    if (onSuccess) onSuccess(result);
                })
                .catch(error => {
                    console.error('AJAX Error:', error);
                    if (onError) {
                        onError(error);
                    } else {
                        // Default error handling
                        showToast(`Request failed: ${error.message}`, 'error');
                    }
                });
        }

               // Updated AJAX call with better error handling
        function submitReaction(postId, reaction) {
            console.log('submitReaction called:', { postId, reaction });

            // Validate postId
            if (!postId || postId === 'undefined' || postId === 'null') {
                console.error('Invalid postId in submitReaction:', postId);
                showToast('Invalid post ID', 'error');
                return;
            }

            // Convert postId to number and validate
            const numericPostId = parseInt(postId);
            if (isNaN(numericPostId) || numericPostId <= 0) {
                console.error('Invalid numeric postId:', postId, 'converted to:', numericPostId);
                showToast('Invalid post ID format', 'error');
                return;
            }

            const currentUserId = document.getElementById('currentUserId')?.value;
            if (!currentUserId) {
                console.error('No current user ID found in submitReaction');
                showToast('Please log in to react to posts', 'error');
                return;
            }

            // Use the correct URL format for your routing
            ajaxCall({
                url: '/Post/ToggleReaction',
                method: 'POST',
                data: {
                    postId: numericPostId,
                    userId: currentUserId,
                    reactionType: reaction || ''
                },
                onSuccess: function(data) {
                    console.log('Reaction response:', data);
                    if (data && data.success) {
                        updateReactionCounts(postId, data);
                        showToast(data.message || 'Reaction updated successfully', 'success');
                    } else {
                        const errorMessage = data?.message || 'Failed to save reaction';
                        showToast(errorMessage, 'error');
                        console.error('Server returned success=false:', data);
                    }
                },
                onError: function(error) {
                    console.error('Reaction error:', error);
                    let errorMessage = 'Failed to save reaction';

                    if (error.message.includes('404')) {
                        errorMessage = 'Reaction endpoint not found. Check your routing.';
                    } else if (error.message.includes('401') || error.message.includes('Unauthorized')) {
                        errorMessage = 'Please log in to react to posts.';
                        // Redirect to login page
                        window.location.href = '/Account/Login';
                    } else if (error.message.includes('403')) {
                        errorMessage = 'You are not authorized to perform this action.';
                    } else if (error.message.includes('500')) {
                        errorMessage = 'Server error occurred. Please try again later.';
                    }

                    showToast(errorMessage, 'error');
                }
            });
        }



        function updateReactionCounts(postId, data) {
            // Update reaction count display
            const reactionCountElement = document.querySelector(`[data-post-id="${postId}"]`).closest('.post-card').querySelector('.reaction-count');
            if (reactionCountElement && data.reactionCount !== undefined) {
                if (data.reactionCount === 0) {
                    reactionCountElement.parentElement.style.display = 'none';
                } else {
                    reactionCountElement.parentElement.style.display = 'flex';
                    reactionCountElement.textContent = data.reactionCount === 1
                        ? '1 person reacted'
                        : `${data.reactionCount.toLocaleString()} reactions`;
                }
            }

            // Update reaction icons based on top reactions
            if (data.topReactions && data.topReactions.length > 0) {
                const reactionIcons = document.querySelector(`[data-post-id="${postId}"]`).closest('.post-card').querySelector('.reaction-icons');
                if (reactionIcons) {
                    reactionIcons.innerHTML = data.topReactions.map(reaction => {
                        const reactionData = reactions[reaction.toLowerCase()];
                        return `<span class="reaction-icon ${reaction.toLowerCase()}" title="${reactionData.text}">${reactionData.emoji}</span>`;
                    }).join('');
                }
            }
        }







        

        

        
        //////////
                // Add the missing function
        function handleReactionButtonClick(postId) {
            console.log('handleReactionButtonClick called with postId:', postId);

            // Validate postId
            if (!postId || postId === 'undefined' || postId === 'null') {
                console.error('Invalid postId:', postId);
                showToast('Invalid post ID', 'error');
                return;
            }

            const currentReaction = userReactions[postId];
            console.log('Current reaction for post', postId, ':', currentReaction);

            // If user has no reaction, default to 'like'
            if (!currentReaction || currentReaction === '' || currentReaction === 'like') {
                selectReaction(postId, 'like');
            } else {
                // Remove current reaction
                selectReaction(postId, null);
            }
        }
        ///////////


        // Comments System
        function toggleComments(postId) {
            const commentsSection = document.getElementById(`comments-${postId}`);
            const isVisible = commentsSection.style.display !== 'none';

            if (isVisible) {
                commentsSection.style.display = 'none';
            } else {
                commentsSection.style.display = 'block';
                // Focus on comment input
                const commentInput = commentsSection.querySelector('.comment-input');
                if (commentInput) {
                    setTimeout(() => commentInput.focus(), 100);
                }
                
                // Load comments if not already loaded
                loadCommentsForPost(postId);
            }
        }

        function loadCommentsForPost(postId) {
            // This function can be used to dynamically load comments
            // For now, we'll use the comments already loaded from the model
        }

        function loadMoreComments(postId) {
            fetch(`/api/posts/${postId}/comments?skip=3`, {
                method: 'GET',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.comments) {
                    const commentsContainer = document.querySelector(`#comments-${postId} .comments-container`);
                    const loadMoreBtn = commentsContainer.querySelector('.load-more-comments');
                    
                    data.comments.forEach(comment => {
                        const commentHTML = createCommentHTML(comment);
                        if (loadMoreBtn) {
                            loadMoreBtn.insertAdjacentHTML('beforebegin', commentHTML);
                        } else {
                            commentsContainer.insertAdjacentHTML('beforeend', commentHTML);
                        }
                    });

                    // Hide load more button if no more comments
                    if (loadMoreBtn && data.hasMore === false) {
                        loadMoreBtn.style.display = 'none';
                    }
                }
            })
            .catch(error => {
                console.error('Error loading comments:', error);
                showToast('Failed to load more comments', 'error');
            });
        }

        function handleCommentSubmit(event, postId) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                submitComment(postId);
            }
        }

        function submitComment(postId) {
            const input = document.querySelector(`[data-post-id="${postId}"].comment-input`);
            const content = input.value.trim();

            if (!content) return;

            const submitBtn = input.parentElement.querySelector('.comment-submit-btn');
            const originalHTML = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<div class="loading-spinner"></div>';

            fetch(`/api/posts/${postId}/comments`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    postId: postId,
                    content: content
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addCommentToUI(postId, data.comment);
                    input.value = '';
                    input.style.height = 'auto';
                    updateCommentCount(postId, 1);
                    showToast('Comment posted successfully', 'success');
                } else {
                    showToast(data.message || 'Failed to post comment', 'error');
                }
            })
            .catch(error => {
                console.error('Comment error:', error);
                showToast('Failed to post comment', 'error');
            })
            .finally(() => {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalHTML;
            });
        }

                     function createCommentHTML(comment) {
            return `
                <div class="comment-item" data-comment-id="${comment.id}">
                    <img src="${comment.authorAvatar}" alt="${comment.authorName}" class="comment-avatar" loading="lazy" />
                    <div class="comment-content">
                        <div class="comment-bubble">
                            <div class="comment-author">${comment.authorName}</div>
                            <div class="comment-text">${comment.content}</div>
                        </div>
                        <div class="comment-actions">
                            <div class="comment-reaction-button-wrapper">
                                <button class="comment-reaction-btn" type="button" data-comment-id="${comment.id}" data-current-reaction="like">
                                    <span class="comment-reaction-emoji">👍</span>
                                    <span class="comment-reaction-text">Like</span>
                                </button>
                                <div class="comment-reactions-popup">
                                    <div class="comment-reaction-item like" data-label="Like" data-reaction="like" onclick="selectCommentReaction(${comment.id}, 'like')">👍</div>
                                    <div class="comment-reaction-item love" data-label="Love" data-reaction="love" onclick="selectCommentReaction(${comment.id}, 'love')">❤️</div>
                                    <div class="comment-reaction-item haha" data-label="Haha" data-reaction="haha" onclick="selectCommentReaction(${comment.id}, 'haha')">😂</div>
                                    <div class="comment-reaction-item sad" data-label="Sad" data-reaction="sad" onclick="selectCommentReaction(${comment.id}, 'sad')">😢</div>
                                    <div class="comment-reaction-item angry" data-label="Angry" data-reaction="angry" onclick="selectCommentReaction(${comment.id}, 'angry')">😡</div>
                                </div>
                            </div>
                                    <button class="comment-action reply-btn"
                onclick="toggleReplyInput(${comment.id})"
                data-comment-id="${comment.id}">
            <i class="fas fa-reply me-1"></i>
            <span>Reply</span>
        </button>
        <div class="comment-owner-actions">
                        <div class="dropdown">
                            <button class="comment-action dropdown-toggle"
                                    type="button"
                                    id="commentMenu${comment.id}"
                                    data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="commentMenu${comment.id}">
                                <li>
                                    <button class="dropdown-item" onclick="editComment(${comment.id})">
                                        <i class="fas fa-edit me-2"></i>Edit
                                    </button>
                                </li>
                                <li>
                                    <button class="dropdown-item text-danger" onclick="deleteComment(${comment.id})">
                                        <i class="fas fa-trash me-2"></i>Delete
                                    </button>
                                </li>
                            </ul>
                        </div>

        <time datetime="${comment.createdAt}">${comment.timeAgo || "now"}</time>
                                </div>

                    </div>
                </div>
            `;
        }

        function addCommentToUI(postId, comment) {
            const commentsContainer = document.querySelector(`#comments-${postId} .comments-container`);
            const noCommentsMsg = commentsContainer.querySelector('div[style*="No comments yet"]');
            
            if (noCommentsMsg) {
                noCommentsMsg.remove();
            }
            
            const commentHTML = createCommentHTML(comment);
            commentsContainer.insertAdjacentHTML('beforeend', commentHTML);

            // Initialize the new comment input handlers
            const newComment = commentsContainer.lastElementChild;
            initializeCommentActions(newComment);
        }

        function initializeCommentActions(commentElement) {
            if (!commentElement) return;

            // Reaction popup hover (show/hide)
            const reactionButtonWrapper = commentElement.querySelector('.comment-reaction-button-wrapper');
            if (reactionButtonWrapper) {
                // Show popup on mouseenter, hide on mouseleave
                reactionButtonWrapper.addEventListener('mouseenter', function () {
                    const popup = this.querySelector('.comment-reactions-popup');
                    if (popup) {
                        popup.style.opacity = '1';
                        popup.style.visibility = 'visible';
                        popup.style.transform = 'translateX(-50%) translateY(0) scale(1)';
                    }
                });
                reactionButtonWrapper.addEventListener('mouseleave', function () {
                    const popup = this.querySelector('.comment-reactions-popup');
                    if (popup) {
                        popup.style.opacity = '';
                        popup.style.visibility = '';
                        popup.style.transform = '';
                    }
                });
            }

            // Reaction selection
            const reactionItems = commentElement.querySelectorAll('.comment-reaction-item');
            reactionItems.forEach(item => {
                item.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const commentId = commentElement.getAttribute('data-comment-id');
                    const reaction = this.getAttribute('data-reaction');
                    if (commentId && reaction) {
                        selectCommentReaction(commentId, reaction);
                    }
                });
            });
        }


        function updateCommentCount(postId, increment) {
            const commentCountElement = document.querySelector(`[data-post-id="${postId}"]`).closest('.post-card').querySelector('.comment-count');
            if (commentCountElement) {
                const currentText = commentCountElement.textContent;
                const currentCount = parseInt(currentText.match(/\d+/)[0]) || 0;
                const newCount = currentCount + increment;
                commentCountElement.textContent = `${newCount.toLocaleString()} comment${newCount === 1 ? '' : 's'}`;
                
                if (newCount > 0) {
                    commentCountElement.parentElement.style.display = 'flex';
                }
            }
        }

        // Comment Reactions
                // Comment Reactions
        function selectCommentReaction(commentId, reaction) {
            // Validate input
            if (!commentId || !reaction) {
                console.error('Invalid parameters for selectCommentReaction:', { commentId, reaction });
                showToast('Invalid comment reaction parameters', 'error');
                return;
            }

            const currentUserId = document.getElementById('currentUserId')?.value;
            if (!currentUserId) {
                console.error('No user ID found for comment reaction');
                showToast('Please log in to react to comments', 'error');
                return;
            }

            // Update UI immediately for better UX
            const commentActions = document.querySelector(`[data-comment-id="${commentId}"] .comment-actions`);
            const commentReactionBtn = commentActions.querySelector('.comment-reaction-btn');

            // Get current state
            const currentReaction = commentReactionBtn.dataset.currentReaction || '';
            const isActive = currentReaction === reaction;

            // Visual update
            if (isActive) {
                // Remove reaction (clicking the same reaction again)
                commentReactionBtn.classList.remove('active');
                commentReactionBtn.style = '';
                commentReactionBtn.querySelector('.comment-reaction-emoji').textContent = '👍';
                commentReactionBtn.querySelector('.comment-reaction-text').textContent = 'Like';
                delete commentReactions[commentId];
            } else {
                // Add or change reaction
                const reactionData = reactions[reaction] || reactions.like;
                commentReactionBtn.classList.add('active');
                commentReactionBtn.style = `color: ${reactionData.color};`;
                commentReactionBtn.querySelector('.comment-reaction-emoji').textContent = reactionData.emoji;
                commentReactionBtn.querySelector('.comment-reaction-text').textContent = reactionData.text;
                commentReactions[commentId] = reaction;

                // Add animation
                const emojiElement = commentReactionBtn.querySelector('.comment-reaction-emoji');
                emojiElement.classList.add('reaction-animate');
                setTimeout(() => emojiElement.classList.remove('reaction-animate'), 300);
            }

            // Send to server
            submitCommentReaction(commentId, isActive ? null : reaction);

            if (!isActive) {
                showToast(`You reacted to comment with ${reactions[reaction].text}`, 'success');
            }
        }

        function submitCommentReaction(commentId, reactionType) {
            console.log('Submitting comment reaction:', { commentId, reactionType });

            // Validate commentId
            if (!commentId || commentId <= 0) {
                console.error('Invalid commentId in submitCommentReaction:', commentId);
                showToast('Invalid comment ID', 'error');
                return;
            }

            const currentUserId = document.getElementById('currentUserId')?.value;
            if (!currentUserId) {
                console.error('No current user ID found in submitCommentReaction');
                showToast('Please log in to react to comments', 'error');
                return;
            }

            // Use the new API endpoint from PostController
            ajaxCall({
                url: `/api/comments/${commentId}/reaction`,
                method: 'POST',
                data: {
                    commentId: commentId,
                    userId: currentUserId,
                    reactionType: reactionType || ''
                },
                onSuccess: function(data) {
                    console.log('Comment reaction response:', data);
                    if (data && data.success) {
                        updateCommentReactionCounts(commentId, data);
                    } else {
                        const errorMessage = data?.message || 'Failed to save comment reaction';
                        showToast(errorMessage, 'error');
                        console.error('Server returned success=false:', data);
                    }
                },
                onError: function(error) {
                    console.error('Comment reaction error:', error);
                    showToast('Failed to save comment reaction', 'error');
                }
            });
        }

        function updateCommentReactionCounts(commentId, data) {
            // Update reaction counts in UI if available
            if (data.reactionCount !== undefined) {
                const reactionCountElement = document.querySelector(`[data-comment-id="${commentId}"] .comment-reaction-count`);
                if (reactionCountElement) {
                    if (data.reactionCount === 0) {
                        reactionCountElement.style.display = 'none';
                    } else {
                        reactionCountElement.style.display = 'inline-flex';
                        reactionCountElement.textContent = data.reactionCount;
                    }
                }
            }

            // Update user's current reaction if needed
            if (data.userReaction) {
                commentReactions[commentId] = data.userReaction.toLowerCase();
            } else {
                delete commentReactions[commentId];
            }
        }

        // Helper function to get anti-forgery token (if not already defined)
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        // Enhanced Bookmark Functionality
        function toggleBookmark(button, postId) {
            const icon = button.querySelector('i');
            
            const userId = document.getElementById('currentUserId').value;
            button.classList.add('saving');
            button.disabled = true;

            fetch(`/Post/SavePost`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    postId: postId,
                    userId: userId,

                })
            })
            .then(response => response.json())
            .then(data => {
                    if (data.success && typeof data.isSaved === "boolean") {
            const newSavedState = data.isSaved;
            // button.dataset.saved = newSavedState.toString();
            button.classList.toggle('saved', newSavedState);

            icon.className = newSavedState ? 'fa-solid fa-bookmark' : 'fa-regular fa-bookmark';
            button.title = newSavedState ? 'Remove from saved posts' : 'Save post';
            button.setAttribute('aria-label', newSavedState ? 'Remove from saved posts' : 'Save post');

            button.classList.add('bookmark-animate');
            setTimeout(() => button.classList.remove('bookmark-animate'), 400);

            showToast(newSavedState ? 'Post saved!' : 'Post removed from saved', 'success');
        } else {
            showToast(newSavedState ? 'Post saved!' : 'Post removed from saved', 'success');
        }

            })
            .catch(error => {
                console.error('Bookmark error:', error);
            showToast(newSavedState ? 'Post saved!' : 'Post removed from saved', 'success');
            })
            .finally(() => {
                button.classList.remove('saving');
                button.disabled = false;
            });
        }

        // Utility Functions
        function autoResizeTextarea(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
        }

        function showReactionDetails(postId) {
            // Load and show detailed reaction breakdown
            fetch(`/api/posts/${postId}/reactions/details`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show modal or detailed view with reaction breakdown
                        showToast('Reaction details loaded', 'info');
                        // Implement modal showing reaction details
                    }
                })
                .catch(error => {
                    showToast('Failed to load reaction details', 'error');
                });
        }

        function sharePost(postId) {
            const postUrl = `${window.location.origin}/posts/${postId}`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'Check out this post',
                    url: postUrl
                }).catch(error => {
                    console.log('Share failed:', error);
                    fallbackCopyToClipboard(postUrl);
                });
            } else {
                fallbackCopyToClipboard(postUrl);
            }
        }

        function fallbackCopyToClipboard(text) {
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text)
                    .then(() => showToast('Post link copied to clipboard!', 'success'))
                    .catch(() => showToast('Failed to copy link', 'error'));
            } else {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    showToast('Post link copied to clipboard!', 'success');
                } catch (error) {
                    showToast('Failed to copy link', 'error');
                }
                document.body.removeChild(textArea);
            }
        }

        function reportPost(postId) {
            if (confirm('Are you sure you want to report this post?')) {
                fetch(`/api/posts/${postId}/report`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ postId: postId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Post reported. Thank you for helping keep our community safe.', 'success');
                    } else {
                        showToast(data.message || 'Failed to report post', 'error');
                    }
                })
                .catch(error => {
                    console.error('Report error:', error);
                    showToast('Failed to report post', 'error');
                });
            }
        }

        function hidePost(postId) {
            const postCard = document.querySelector(`[data-post-id="${postId}"]`);
            if (postCard && confirm('Hide this post from your feed?')) {
                postCard.style.transition = 'all 0.3s ease';
                postCard.style.opacity = '0';
                postCard.style.transform = 'translateY(-20px)';

                fetch(`/api/posts/${postId}/hide`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ postId: postId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        setTimeout(() => {
                            postCard.style.display = 'none';
                            showToast('Post hidden from your feed', 'info');
                        }, 300);
                    } else {
                        // Revert UI changes on failure
                        postCard.style.opacity = '1';
                        postCard.style.transform = 'translateY(0)';
                        showToast(data.message || 'Failed to hide post', 'error');
                    }
                })
                .catch(error => {
                    console.error('Hide post error:', error);
                    // Revert UI changes on error
                    postCard.style.opacity = '1';
                    postCard.style.transform = 'translateY(0)';
                    showToast('Failed to hide post', 'error');
                });
            }
        }

        

        // Enhanced Toast notification system
        function showToast(message, type = 'info', duration = 5000) {
            const toastContainer = document.getElementById('toastContainer') || createToastContainer();

            const toast = document.createElement('div');
            toast.className = `toast-notification ${type}`;
            toast.innerHTML = `
                <div class="toast-icon">
                    ${getToastIcon(type)}
                </div>
                <div class="toast-content">
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="removeToast(this.parentElement)">
                    <i class="fas fa-times"></i>
                </button>
            `;

            toastContainer.appendChild(toast);

            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);

            // Auto remove
            setTimeout(() => removeToast(toast), duration);

            return toast;
        }

        function createToastContainer() {
            let container = document.getElementById('toastContainer');
            if (!container) {
                container = document.createElement('div');
                container.id = 'toastContainer';
                container.className = 'toast-container';
                document.body.appendChild(container);
            }
            return container;
        }

        function getToastIcon(type) {
            const icons = {
                success: '<i class="fas fa-check-circle" style="color: var(--success-green);"></i>',
                error: '<i class="fas fa-exclamation-circle" style="color: var(--danger-red);"></i>',
                info: '<i class="fas fa-info-circle" style="color: var(--primary-blue);"></i>',
                warning: '<i class="fas fa-exclamation-triangle" style="color: var(--warning-orange);"></i>'
            };
            return icons[type] || icons.info;
        }

        function removeToast(toast) {
            if (toast && toast.parentElement) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.parentElement.removeChild(toast);
                    }
                }, 300);
            }
        }

  

        function sendPost(postId) {
            showToast('Send functionality coming soon!', 'info');
        }


     </script>
     
     
     <script>
                 // Enhanced Comment Reply Functionality
        function toggleReplyInput(commentId) {
            const replySection = document.getElementById(`reply-${commentId}`);
            const isVisible = replySection.style.display !== 'none';

            if (isVisible) {
                replySection.style.display = 'none';
            } else {
                replySection.style.display = 'block';
                const replyInput = replySection.querySelector('.reply-input');
                setTimeout(() => replyInput.focus(), 100);

                // Initialize reply input handlers
                initializeReplyInput(replyInput);
            }
        }

        function initializeReplyInput(input) {
            input.addEventListener('input', function() {
                const submitBtn = this.parentElement.querySelector('.reply-submit-btn');
                submitBtn.disabled = this.value.trim() === '';
                autoResizeTextarea(this);
            });
        }

        function handleReplySubmit(event, commentId) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                submitReply(commentId);
            }
        }

        function submitReply(commentId) {
            const replyInput = document.querySelector(`[data-comment-id="${commentId}"].reply-input`);
            const content = replyInput.value.trim();

            if (!content) return;

            const submitBtn = replyInput.parentElement.querySelector('.reply-submit-btn');
            const originalHTML = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<div class="loading-spinner"></div>';

            // Call your reply API
            fetch('/api/comments/reply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    parentCommentId: commentId,
                    content: content
                })
            })
                    .then(data => {
            if (data.success) {
                addReplyToUI(commentId, data.reply);
                replyInput.value = '';
                replyInput.style.height = 'auto';
                toggleReplyInput(commentId); // Hide reply input
                showToast('Reply posted successfully', 'success');
            } else {
                showToast(data.message || 'Failed to post reply', 'error');
            }
        })


            .catch(error => {
                console.error('Reply error:', error);
                showToast('Failed to post reply', 'error');
            })
            .finally(() => {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalHTML;
            });
        }

                function addReplyToUI(parentCommentId, reply) {
            // Find the replies container for this comment
            const commentContent = document.querySelector(`[data-comment-id="${parentCommentId}"] .comment-content`);
            let repliesContainer = commentContent.querySelector('.replies-container');
            if (!repliesContainer) {
                // Create replies container if it doesn't exist
                repliesContainer = document.createElement('div');
                repliesContainer.className = 'replies-container';
                repliesContainer.style.marginLeft = '44px';
                commentContent.appendChild(repliesContainer);
            }

            // Build the reply HTML
            const replyHTML = `
                <div class="comment-item reply-item" data-comment-id="${reply.id}">
                    <img src="${reply.authorAvatar || '/imgs/Account/default.png'}" alt="${reply.authorName}" class="comment-avatar" loading="lazy" />
                    <div class="comment-content">
                        <div class="comment-bubble">
                            <div class="comment-author">${reply.authorName}</div>
                            <div class="comment-text">
                                ${reply.content}
                                ${reply.isEdited ? '<small class="text-muted ms-1">(edited)</small>' : ''}
                            </div>
                        </div>
                        <div class="comment-actions">
                            <time datetime="${reply.createdAt}">${reply.timeAgo}</time>
                        </div>
                    </div>
                </div>
            `;
            repliesContainer.insertAdjacentHTML('beforeend', replyHTML);
        }



        // Enhanced Comment Reaction Details
        function showCommentReactionDetails(commentId) {
            fetch(`/api/comments/${commentId}/reactions/details`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show modal with reaction details
                        showToast('Comment reaction details loaded', 'info');
                    }
                })
                .catch(error => {
                    showToast('Failed to load reaction details', 'error');
                });
        }

        // Comment Management
        function editComment(commentId) {
            const commentBubble = document.querySelector(`[data-comment-id="${commentId}"] .comment-bubble`);
            const commentText = commentBubble.querySelector('.comment-text');
            const originalText = commentText.textContent;

            // Replace with editable textarea
            commentText.innerHTML = `
                <textarea class="edit-comment-input" style="width: 100%; border: 1px solid var(--border-light); border-radius: 8px; padding: 8px;">${originalText}</textarea>
                <div class="edit-actions" style="margin-top: 8px;">
                    <button class="btn btn-sm btn-primary" onclick="saveCommentEdit(${commentId})">Save</button>
                    <button class="btn btn-sm btn-secondary" onclick="cancelCommentEdit(${commentId}, '${originalText}')">Cancel</button>
                </div>
            `;

            commentBubble.querySelector('.edit-comment-input').focus();
        }

        function saveCommentEdit(commentId) {
            const commentBubble = document.querySelector(`[data-comment-id="${commentId}"] .comment-bubble`);
            const newContent = commentBubble.querySelector('.edit-comment-input').value.trim();

            if (!newContent) {
                showToast('Comment cannot be empty', 'error');
                return;
            }

            fetch(`/api/comments/${commentId}/edit`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ content: newContent })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const commentText = commentBubble.querySelector('.comment-text');
                    commentText.innerHTML = newContent + ' <small class="text-muted">(edited)</small>';
                    showToast('Comment updated successfully', 'success');
                } else {
                    showToast(data.message || 'Failed to update comment', 'error');
                }
            })
            .catch(error => {
                showToast('Failed to update comment', 'error');
            });
        
        
        }

        function cancelCommentEdit(commentId, originalText) {
            const commentBubble = document.querySelector(`[data-comment-id="${commentId}"] .comment-bubble`);
            const commentText = commentBubble.querySelector('.comment-text');
            commentText.innerHTML = originalText;
        }

        function deleteComment(commentId) {
            if (!confirm('Are you sure you want to delete this comment?')) return;

            fetch(`/api/comments/${commentId}/delete`, {
                method: 'DELETE',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const commentItem = document.querySelector(`[data-comment-id="${commentId}"]`);
                    commentItem.style.opacity = '0';
                    setTimeout(() => commentItem.remove(), 300);
                    showToast('Comment deleted successfully', 'success');
                } else {
                    showToast(data.message || 'Failed to delete comment', 'error');
                }
            })
            .catch(error => {
                showToast('Failed to delete comment', 'error');
            });
        }

        function reportComment(commentId) {
            if (!confirm('Are you sure you want to report this comment?')) return;

            fetch(`/api/comments/${commentId}/report`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ commentId: commentId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Comment reported successfully', 'success');
                } else {
                    showToast(data.message || 'Failed to report comment', 'error');
                }
            })
            .catch(error => {
                showToast('Failed to report comment', 'error');
            });
        }

         </script>

         <script>
                     function editReply(replyId) {
            const replyBubble = document.querySelector(`[data-comment-id="${replyId}"] .comment-bubble`);
            const replyText = replyBubble.querySelector('.comment-text');
            const originalText = replyText.textContent.trim();

            // Replace with editable textarea
            replyText.innerHTML = `
                <textarea class="edit-reply-input" style="width: 100%; border: 1px solid var(--border-light); border-radius: 8px; padding: 8px;">${originalText}</textarea>
                <div class="edit-actions" style="margin-top: 8px;">
                    <button class="btn btn-sm btn-primary" onclick="saveReplyEdit(${replyId})">Save</button>
                    <button class="btn btn-sm btn-secondary" onclick="cancelReplyEdit(${replyId}, \`${originalText.replace(/`/g, '\\`')}\`)">Cancel</button>
                </div>
            `;
            replyBubble.querySelector('.edit-reply-input').focus();
        }

        function saveReplyEdit(replyId) {
            const replyBubble = document.querySelector(`[data-comment-id="${replyId}"] .comment-bubble`);
            const newContent = replyBubble.querySelector('.edit-reply-input').value.trim();

            if (!newContent) {
                showToast('Reply cannot be empty', 'error');
                return;
            }

            fetch(`/api/replies/${replyId}/edit`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ content: newContent })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const replyText = replyBubble.querySelector('.comment-text');
                    replyText.innerHTML = newContent + ' <small class="text-muted">(edited)</small>';
                    showToast('Reply updated successfully', 'success');
                } else {
                    showToast(data.message || 'Failed to update reply', 'error');
                }
            })
            .catch(error => {
                showToast('Failed to update reply', 'error');
            });
        }

        function cancelReplyEdit(replyId, originalText) {
            const replyBubble = document.querySelector(`[data-comment-id="${replyId}"] .comment-bubble`);
            const replyText = replyBubble.querySelector('.comment-text');
            replyText.innerHTML = originalText;
        }

        function deleteReply(replyId) {
            if (!confirm('Are you sure you want to delete this reply?')) return;

            fetch(`/api/replies/${replyId}/delete`, {
                method: 'DELETE',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const replyItem = document.querySelector(`[data-comment-id="${replyId}"]`);
                    replyItem.style.opacity = '0';
                    setTimeout(() => replyItem.remove(), 300);
                    showToast('Reply deleted successfully', 'success');
                } else {
                    showToast(data.message || 'Failed to delete reply', 'error');
                }
            })
            .catch(error => {
                showToast('Failed to delete reply', 'error');
            });
        }

         </script>

    @Html.AntiForgeryToken()

    <script>
        function confirmDeletePost(postId) {
            if (confirm('Are you sure you want to delete this post?')) {
                // Hide the post in the UI
                var postCard = document.querySelector('[data-post-id="' + postId + '"]');
                if (postCard) {
                    postCard.style.display = 'none';
                }
                // Submit the form to backend
                document.getElementById('deletePostForm-' + postId).submit();
            }
        }
    </script>
     
    

}

